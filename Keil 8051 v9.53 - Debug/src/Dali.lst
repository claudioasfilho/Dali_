C51 COMPILER V9.53.0.0   DALI                                                              04/20/2016 10:34:27 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE DALI
OBJECT MODULE PLACED IN .\src\Dali.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v3_3\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\clfil
                    -ho\Dropbox (Silicon Labs)\Code_Workspace_Dali\Dali_\src\Dali.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) 
                    -FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:/SiliconLabs/SimplicityStudio/v3_3
                    -/developer/sdks/si8051/v3//Device/shared/si8051Base;C:/SiliconLabs/SimplicityStudio/v3_3/developer/sdks/si8051/v3//Devic
                    -e/EFM8UB1;C:/SiliconLabs/SimplicityStudio/v3_3/developer/sdks/si8051/v3//Device/EFM8UB1/inc;C:\SiliconLabs\SimplicityStu
                    -dio\v3_4a\developer\sdks\si8051\v3\Device\EFM8UB1\inc) PRINT(.\src\Dali.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.
                    -\src\Dali.OBJ)

line level    source

   1          //-----------------------------------------------------------------------------
   2          // Dali.c
   3          //-----------------------------------------------------------------------------
   4          // Copyright 2014 Silicon Laboratories, Inc.
   5          // http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   6          //
   7          // Program Description:
   8          //
   9          // This program uses Timer0 in 8-bit counter/timer with reload mode.
  10          // It uses the Timer0 to create an interrupt at a certain rate and toggles
  11          // the LED when the interrupt counter reaches the selected value. 
  12          //
  13          // Resources:
  14          //   SYSCLK - 24.5 MHz HFOSC0 / 8
  15          //   Timer0 - 10 Hz interrupt
  16          //   P1.4   - LED green
  17          //   P2.3   - Display enable
  18          //
  19          //-----------------------------------------------------------------------------
  20          // How To Test: EFM8UB1 STK
  21          //-----------------------------------------------------------------------------
  22          // 1) Place the switch in "AEM" mode.
  23          // 2) Connect the EFM8UB1 STK board to a PC using a mini USB cable.
  24          // 3) Compile and download code to the EFM8UB1 STK board.
  25          //    In Simplicity Studio IDE, select Run -> Debug from the menu bar,
  26          //    click the Debug button in the quick menu, or press F11.
  27          // 4) Run the code.
  28          //    In Simplicity Studio IDE, select Run -> Resume from the menu bar,
  29          //    click the Resume button in the quick menu, or press F8.
  30          // 5) Check that the green LED is blinking.
  31          //
  32          // Target:         EFM8UB1
  33          // Tool chain:     Generic
  34          //
  35          // Release 0.1 (ST)
  36          //    - Initial Revision
  37          //    - 10 OCT 2014
  38          //
  39          
  40          //-----------------------------------------------------------------------------
  41          // Includes
  42          //-----------------------------------------------------------------------------
  43          #include <SI_EFM8UB1_Register_Enums.h>
  44          #include "InitDevice.h"
  45          #include "Dali.h"
  46          
  47          
  48          
  49          
  50          //bit MDone;
C51 COMPILER V9.53.0.0   DALI                                                              04/20/2016 10:34:27 PAGE 2   

  51          //bit MOutput;
  52          //bit DaliStopFlag;
  53          //bit DaliErrorFlag;
  54          
  55          DALIFLAGS DaliFlags;
  56          
  57          /*********************************************************************************
  58           *********************************************************************************
  59                                                   Manchester Encoder Related Functions
  60           *********************************************************************************
  61           *********************************************************************************/
  62          
  63          
  64          /*Manchester Decoder Busy Flag Getters and Setters*/
  65          
  66          void SetBusyFlag()
  67          {
  68   1              DaliFlags.flag.Busy = 1;
  69   1      }
  70          
  71          void ClearBusyFlag()
  72          {
  73   1              DaliFlags.flag.Busy = 0;
  74   1      }
  75          
  76          bit GetBusyFlag()
  77          {
  78   1       return DaliFlags.flag.Busy;
  79   1      }
  80          
  81          /*Manchester Decoder Output Flag Getters and Setters*/
  82          
  83          void SetMDOutput()
  84          {
  85   1              DaliFlags.flag.Output =1;
  86   1      }
  87          
  88          void ClearMDOutput()
  89          {
  90   1              DaliFlags.flag.Output =0;
  91   1      }
  92          
  93          bit GetMDOutput()
  94          {
  95   1       return DaliFlags.flag.Output;
  96   1      }
  97          
  98          
  99          void ManchesterEncoder (uint8_t input)
 100          {
 101   1              static BITS_BYTE Input;
 102   1      
 103   1              static int8_t counter = 8;                              //It uses 8 steps because it sends 7 bits and stills needs the time to conc
             -lude the last bit before it loads the counter again
 104   1      
 105   1              ClearBusyFlag();
 106   1      
 107   1              if (counter==8)
 108   1              {
 109   2                      Input.Abyte = input;
 110   2              }
 111   1      
 112   1              while (counter>=0)
C51 COMPILER V9.53.0.0   DALI                                                              04/20/2016 10:34:27 PAGE 3   

 113   1              {
 114   2                      while(GetBusyFlag()==1);
 115   2      
 116   2                      if (GetBusyFlag()==0)
 117   2                      {
 118   3                              switch (counter--){
 119   4      
 120   4                                                              case 0: //SetBusyFlag();
 121   4                                                              break;
 122   4                                                              case 1: DaliFlags.flag.Output = Input.nybble.BB0;
 123   4                                                              SetBusyFlag();
 124   4                                                              break;
 125   4                                                              case 2: DaliFlags.flag.Output = Input.nybble.BB1;
 126   4                                                              SetBusyFlag();
 127   4                                                              break;
 128   4                                                              case 3: DaliFlags.flag.Output = Input.nybble.BB2;
 129   4                                                              SetBusyFlag();
 130   4                                                              break;
 131   4                                                              case 4: DaliFlags.flag.Output = Input.nybble.BB3;
 132   4                                                              SetBusyFlag();
 133   4                                                              break;
 134   4                                                              case 5: DaliFlags.flag.Output = Input.nybble.BB4;
 135   4                                                              SetBusyFlag();
 136   4                                                              break;
 137   4                                                              case 6: DaliFlags.flag.Output = Input.nybble.BB5;
 138   4                                                              SetBusyFlag();
 139   4                                                              break;
 140   4                                                              case 7: DaliFlags.flag.Output = Input.nybble.BB6;
 141   4                                                              SetBusyFlag();
 142   4                                                              break;
 143   4                                                              case 8: DaliFlags.flag.Output = Input.nybble.BB7;
 144   4                                                              SetBusyFlag();
 145   4                                                              break;
 146   4                                      }
 147   3      
 148   3      
 149   3                      }
 150   2      
 151   2              }
 152   1      
 153   1              counter=8;
 154   1      
 155   1      }
 156          
 157          /*********************************************************************************
 158           *********************************************************************************
 159                                                   Dali TX Related Functions
 160           *********************************************************************************
 161           *********************************************************************************/
 162          
 163          void DaliTxHandler()
 164          {
 165   1              static uint8_t counter = 0;
 166   1              static uint8_t evcounter = 0;
 167   1      
 168   1              if (GetBusyFlag())
 169   1              {
 170   2                      if (evcounter++==15)
 171   2                              {evcounter=0;}
 172   2                      if (GetDaliStopFlag()==0)               //Are these the Stop Bits?
 173   2                      {
 174   3      
 175   3                              //The next lines implement the two steps of the Manchester Decoding
C51 COMPILER V9.53.0.0   DALI                                                              04/20/2016 10:34:27 PAGE 4   

 176   3                              if (counter==0)                                 //Process First Part of the Byte
 177   3                              {
 178   4                                      if (GetMDOutput()==0) SetDaliOutputPin();
 179   4                                      else ClearDaliOutputPin();
 180   4                                      counter++;
 181   4                              }
 182   3                              else
 183   3                              {                                                               //Process 2nd Part of the Byte
 184   4      
 185   4                                      if (GetMDOutput()==0) ClearDaliOutputPin();
 186   4                                      else SetDaliOutputPin();
 187   4                                      counter=0;
 188   4      
 189   4                                      ClearBusyFlag();                //Finished Processing Byte for Manchester Encoder
 190   4                              }
 191   3      
 192   3                      }
 193   2                      else                            //Yes, This is the Stop bits stage
 194   2                              {
 195   3                                      if (counter++<4)        SetDaliOutputPin();             //It keeps the Output High for 4 Cycles of the Timer
 196   3                                      else{
 197   4                                                      SetDaliOutputPin();             //The Line is normally High;
 198   4                                                      counter=0;
 199   4                                                      ClearDaliStopFlag();
 200   4                                                      ClearBusyFlag();                //Finished Processing Byte for Manchester Encoder
 201   4                                              }
 202   3                              }
 203   2                      }
 204   1      
 205   1      }
 206          
 207          
 208          void ReloadDaliTxTimer(uint8_t reloadH, uint8_t reloadL)
 209          {
 210   1              TH0 = reloadH;
 211   1              TL0 = reloadL;
 212   1      }
 213          
 214          
 215          void StartDaliTxTimer()
 216          {
 217   1      
 218   1              TCON |= TCON_TR0__RUN;          //Enables Timer 1 Run
 219   1      }
 220          
 221          
 222          uint16_t GetDaliTxTimer()
 223          {
 224   1              return TH0|TL0;
 225   1      }
 226          
 227          
 228          void StopDaliTxTimer()
 229          {
 230   1      
 231   1              TH1 = 0;
 232   1              TL1 = 0;
 233   1              TCON |= TCON_TR0__STOP;         //Enables Timer 1 Run
 234   1      }
 235          
 236          
 237          void DaliFrameStart()
 238          {
C51 COMPILER V9.53.0.0   DALI                                                              04/20/2016 10:34:27 PAGE 5   

 239   1              ClearBusyFlag();                                //Clear Flag that indicates the Manchester Decoder is Busy on the Interrupt
 240   1              SetMDOutput();
 241   1              SetBusyFlag();                                  //Sets the Busy Flag so the Bit can be processed
 242   1              while(GetBusyFlag()==1);                //Waits until the Bit gets transmitted
 243   1      
 244   1      }
 245          
 246          void DaliFrameStop()
 247          {
 248   1              ClearBusyFlag();                //Clear Flag that indicates the Manchester Decoder is Busy on the Interrupt
 249   1              SetDaliStopFlag();
 250   1              SetBusyFlag();                  //Sets the Busy Flag so the Bit can be processed
 251   1              while(GetBusyFlag()==1);                //Waits until the Bit gets transmitted
 252   1      
 253   1      }
 254          
 255          void DaliTXStateMachine(uint8_t address, uint8_t Ddata)
 256          {
 257   1              DALI_FRAME States;
 258   1      
 259   1              SetDaliOutputPin();                     //The Line is Normally High
 260   1              States = START;
 261   1      
 262   1              while (States<END)
 263   1              {
 264   2                      switch (States)
 265   2                      {
 266   3                              case START: {
 267   4                                                              DaliFrameStart();
 268   4                                                              States= ADDRESS;
 269   4                                                              break;
 270   4                                                      }
 271   3      
 272   3                              case ADDRESS: {
 273   4                                                              ManchesterEncoder(address);
 274   4                                                              States= DATA;
 275   4                                                              break;
 276   4                                                      }
 277   3      
 278   3                              case DATA: {
 279   4                                                              ManchesterEncoder(Ddata);
 280   4                                                              States= STOP;
 281   4                                                              break;
 282   4                                                      }
 283   3      
 284   3                              case STOP: {
 285   4                                                              DaliFrameStop();
 286   4                                                              States= END;
 287   4                                                              break;
 288   4                                                      }
 289   3      
 290   3                      }
 291   2              }
 292   1      
 293   1      }
 294          /*Dali Stop bit Flag Getters and Setters*/
 295          
 296          void SetDaliStopFlag()
 297          {
 298   1              DaliFlags.flag.Stop =1;
 299   1      }
 300          
 301          void ClearDaliStopFlag()
C51 COMPILER V9.53.0.0   DALI                                                              04/20/2016 10:34:27 PAGE 6   

 302          {
 303   1              DaliFlags.flag.Stop =0;
 304   1      }
 305          
 306          bit GetDaliStopFlag()
 307          {
 308   1       return DaliFlags.flag.Stop;
 309   1      }
 310          
 311          
 312          void SetDaliOutputPin()
 313          {
 314   1              DALI_OUT=1;
 315   1      }
 316          
 317          void ClearDaliOutputPin()
 318          {
 319   1              DALI_OUT=0;
 320   1      }
 321          
 322          bit GetDaliOutputPin()
 323          {
 324   1       return DALI_OUT;
 325   1      }
 326          
 327          
 328          /*********************************************************************************
 329           *********************************************************************************
 330                                                   Dali RX Related Functions
 331           *********************************************************************************
 332           *********************************************************************************/
 333          uint8_t BusQuietCounter;
 334          
 335          bit _1stQ;
 336          bit _2ndQ;
 337          bit _3rdQ;
 338          bit _4thQ;
 339          
 340          
 341          
 342          
 343          DALI_FRAME startconditionbitDemodulation()
 344          {
 345   1              static xdata DALI_DEMOD bitState = _1qB;
 346   1      
 347   1              switch (bitState)
 348   1              {
 349   2                      case _1qB: //This is Triggered by the INT1_ISR
 350   2                      {
 351   3                              if((GetDaliIntputPin()==DALI_LOGIC_0))
 352   3                              {
 353   4      
 354   4                                      //_1stQ = GetDaliIntputPin();
 355   4                                      ReloadnStartDaliRxTimer(STMH, STML);
 356   4                                      bitState = _2qB;
 357   4                                      ToogleTestLed();
 358   4                              }
 359   3                              break;
 360   3                      }
 361   2      
 362   2                      case _2qB: //This is Triggered by the TIMER1_ISR
 363   2                      {
 364   3                              if((GetDaliIntputPin()==DALI_LOGIC_0))
C51 COMPILER V9.53.0.0   DALI                                                              04/20/2016 10:34:27 PAGE 7   

 365   3                              {
 366   4      
 367   4                                      //_2ndQ = GetDaliIntputPin();
 368   4                                      StopnDisableDaliRxTimer();
 369   4                                      SetDaliInputPinPolarity(ACTIVE_HIGH);
 370   4                                      EnableInt1();
 371   4                                      bitState = _3qB;
 372   4                                      ToogleTestLed();
 373   4                              }
 374   3                              else
 375   3                              {
 376   4                                      StopnDisableDaliRxTimer();
 377   4                              bitState = _1qB;
 378   4                              }
 379   3                              break;
 380   3                      }
 381   2      
 382   2                      case _3qB: //This is Triggered by the TIMER1_ISR
 383   2                      {
 384   3                              if((GetDaliIntputPin()==DALI_LOGIC_1))
 385   3                              {
 386   4      
 387   4                                      //_3rdQ = GetDaliIntputPin();
 388   4                                      ReloadnStartDaliRxTimer(STMH, STML);
 389   4                                      bitState = _4qB;
 390   4                                      ToogleTestLed();
 391   4      
 392   4                              }
 393   3                              break;
 394   3      
 395   3                      }
 396   2                      case _4qB: //This is Triggered by the TIMER1_ISR, once completed successfully it disables the INT1 and i
             -t uses the Timer to check the DALI_IN State
 397   2                      {
 398   3                              if((GetDaliIntputPin()==DALI_LOGIC_1))
 399   3                              {
 400   4      
 401   4                                      //_4thQ = GetDaliIntputPin();
 402   4                                      DisableInt1();
 403   4                                      ReloadnStartDaliRxTimer(STMH, STML);
 404   4                                      bitState = _1qB;
 405   4                                      ToogleTestLed();
 406   4                                      return ADDRESS; //Processing is done. It resets this state machine and moves the main state machine to
             - the next state
 407   4                              }
 408   3                              else
 409   3                              {
 410   4                                      //Something is wrong with the Data, it resets the INT trigger and Disables Timer
 411   4                                      StopnDisableDaliRxTimer();
 412   4                                      SetDaliInputPinPolarity(ACTIVE_LOW);
 413   4                                      EnableInt1();
 414   4                                      StopnDisableDaliRxTimer();
 415   4                                      bitState = _1qB;
 416   4                                      return IDLE;
 417   4                              }
 418   3                              break;
 419   3                      }
 420   2      
 421   2              }
 422   1      
 423   1              return START; //Still Processing the Bit
 424   1      }
 425          
C51 COMPILER V9.53.0.0   DALI                                                              04/20/2016 10:34:27 PAGE 8   

 426          
 427          
 428          
 429          bit bitDemodulation()
 430          {
 431   1              static xdata DALI_DEMOD bitState = _1qB;
 432   1      
 433   1              switch (bitState)
 434   1                      {
 435   2                              case _1qB: //This is Triggered by the TIMER1_ISR
 436   2                              {
 437   3      
 438   3                                      _1stQ = GetDaliIntputPin();
 439   3                                      ReloadnStartDaliRxTimer(STMH, STML);
 440   3                                      bitState = _2qB;
 441   3                                      ToogleTestLed();
 442   3                                      break;
 443   3                              }
 444   2      
 445   2                              case _2qB: //This is Triggered by the TIMER1_ISR
 446   2                              {
 447   3                                      _2ndQ = GetDaliIntputPin();
 448   3                                      ReloadnStartDaliRxTimer(STMH, STML);
 449   3                                      bitState = _3qB;
 450   3                                      ToogleTestLed();
 451   3                                      break;
 452   3                              }
 453   2      
 454   2                              case _3qB: //This is Triggered by the TIMER1_ISR
 455   2                              {
 456   3      
 457   3                                      _3rdQ = GetDaliIntputPin();
 458   3                                      ReloadnStartDaliRxTimer(STMH, STML);
 459   3                                      bitState = _4qB;
 460   3                                      ToogleTestLed();
 461   3                                      break;
 462   3      
 463   3                              }
 464   2                              case _4qB: //This is Triggered by the TIMER1_ISR
 465   2                              {
 466   3      
 467   3                                      _4thQ = GetDaliIntputPin();
 468   3                                      ReloadnStartDaliRxTimer(STMH, STML);
 469   3                                      bitState = _1qB;
 470   3                                      ToogleTestLed();
 471   3                                      return 1; //Processing is done. It resets this state machine and informs user the bit information is a
             -vailable
 472   3                                      break;
 473   3                              }
 474   2                      }
 475   1              return 0;       //Still Processing the Bit
 476   1      
 477   1      }
 478          
 479          //This Function returns the Logic level of the Bit read by the bitDemodulation() function and it clears th
             -e "Quarter" bits. If the bit is invalid, it returns -1
 480          int isbitHighorLow()
 481          {
 482   1              int output=-1;
 483   1      
 484   1              if ((_1stQ==DALI_LOGIC_0) && (_2ndQ==DALI_LOGIC_0) && (_3rdQ==DALI_LOGIC_1) && (_4thQ==DALI_LOGIC_1)) out
             -put = 1;
 485   1              else if ((_1stQ==DALI_LOGIC_1) && (_2ndQ==DALI_LOGIC_1) && (_3rdQ==DALI_LOGIC_0) && (_4thQ==DALI_LOGIC_0)
C51 COMPILER V9.53.0.0   DALI                                                              04/20/2016 10:34:27 PAGE 9   

             -) output = 0;
 486   1      
 487   1              _1stQ=0;
 488   1              _2ndQ=0;
 489   1              _3rdQ=0;
 490   1              _4thQ=0;
 491   1      
 492   1              return output;
 493   1      }
 494          /*
 495          int8_t ReadDaliByte()
 496          {
 497                  static xdata BITS_BYTE address;
 498                  static xdata uint8_t bitscounter=7;
 499                  int bitread=0;
 500          
 501                  if (bitDemodulation())  //Is Demodulation done for the bit?
 502                  {
 503                          bitread = isbitHighorLow();
 504          
 505                          if (bitread!=-1)
 506                          {
 507                                  switch (bitscounter)
 508                                  {
 509                                          case 0: address.nybble.BB0 = bitread;
 510                                                          break;
 511          
 512                                          case 1: address.nybble.BB1 = bitread;
 513                                                          break;
 514          
 515                                          case 2: address.nybble.BB2 = bitread;
 516                                                          break;
 517          
 518                                          case 3: address.nybble.BB3 = bitread;
 519                                                          break;
 520          
 521                                          case 4: address.nybble.BB4 = bitread;
 522                                                          break;
 523          
 524                                          case 5: address.nybble.BB5 = bitread;
 525                                                          break;
 526          
 527                                          case 6: address.nybble.BB6 = bitread;
 528                                                          break;
 529          
 530                                          case 7: address.nybble.BB7 = bitread;
 531                                                          break;
 532                                  }
 533                                  if(bitscounter--==0)
 534                                  {
 535                                          NOP();
 536                                          bitscounter=7;
 537                                          return address.Abyte;
 538                                  }
 539          
 540                          }
 541          
 542                          else //If any of the bits is corrupted, the device goes to IDLE MODE
 543                          {
 544                                  return -1;
 545                          }
 546          
 547                          return -2;              //returns -2 while collecting all the bits from the Dali Byte
C51 COMPILER V9.53.0.0   DALI                                                              04/20/2016 10:34:27 PAGE 10  

 548          
 549                  }
 550          }*/
 551          
 552          void DaliRXDecoding()
 553          {
 554   1              static xdata DALI_FRAME State = IDLE;
 555   1              static xdata int8_t aaddress;
 556   1      
 557   1              static xdata BITS_BYTE address;
 558   1              static xdata uint8_t bitscounter=7;
 559   1              int bitread=0;
 560   1      
 561   1      
 562   1              switch (State)
 563   1      
 564   1                              {
 565   2      
 566   2                                      case IDLE:                      //In this state, it checks if the RX bus was quite and also if it receives the start bit
 567   2                                                              {
 568   3                                                                      if (GetBusQuietCounter()>1) State = START;
 569   3                                                                      address.Abyte=0;
 570   3                                                                      //This Jumps straight to the next State on the State Machine so we don't loose a cycle
 571   3                                                              }
 572   2      
 573   2                                      case START:                     //In this state, it checks if the RX bus was quite and also if it receives the start bit
 574   2                                                              {
 575   3                                                                      State = startconditionbitDemodulation();
 576   3                                                                      break;
 577   3                                                              }
 578   2      
 579   2                                      case ADDRESS:                   //In this state, it checks if the RX bus was quite and also if it receives the star
             -t bit
 580   2                                                      {
 581   3      
 582   3                                                              if (bitDemodulation())  //Is Demodulation done for the bit?
 583   3                                                                      {
 584   4                                                                              bitread = isbitHighorLow();
 585   4      
 586   4                                                                              if (bitread!=-1)
 587   4                                                                              {
 588   5                                                                                      switch (bitscounter)
 589   5                                                                                      {
 590   6                                                                                              case 0: address.nybble.BB0 = bitread;
 591   6                                                                                                              break;
 592   6      
 593   6                                                                                              case 1: address.nybble.BB1 = bitread;
 594   6                                                                                                              break;
 595   6      
 596   6                                                                                              case 2: address.nybble.BB2 = bitread;
 597   6                                                                                                              break;
 598   6      
 599   6                                                                                              case 3: address.nybble.BB3 = bitread;
 600   6                                                                                                              break;
 601   6      
 602   6                                                                                              case 4: address.nybble.BB4 = bitread;
 603   6                                                                                                              break;
 604   6      
 605   6                                                                                              case 5: address.nybble.BB5 = bitread;
 606   6                                                                                                              break;
 607   6      
 608   6                                                                                              case 6: address.nybble.BB6 = bitread;
 609   6                                                                                                              break;
C51 COMPILER V9.53.0.0   DALI                                                              04/20/2016 10:34:27 PAGE 11  

 610   6      
 611   6                                                                                              case 7: address.nybble.BB7 = bitread;
 612   6                                                                                                              break;
 613   6                                                                                      }
 614   5                                                                                      if(bitscounter--==0)
 615   5                                                                                      {
 616   6                                                                                              NOP();
 617   6                                                                                              bitscounter=7;
 618   6                                                                                              aaddress= address.Abyte;
 619   6                                                                                      }
 620   5      
 621   5                                                                              }
 622   4      
 623   4                                                                              else //If any of the bits is corrupted, the device goes to IDLE MODE
 624   4                                                                              {
 625   5                                                                                      State = IDLE;
 626   5                                                                                      //#warning "Add_a_flag_indicating_error"
 627   5                                                                              }
 628   4                                                              }
 629   3                                                              break;
 630   3                                                      }
 631   2                                      case DATA:
 632   2                                                      {
 633   3      
 634   3                                                      }//End of case DATA:
 635   2      
 636   2                                      default: State=IDLE;
 637   2      
 638   2      
 639   2      
 640   2                              }
 641   1      }
 642          
 643          
 644          bit GetDaliIntputPin()
 645          {
 646   1       return DALI_IN;
 647   1      }
 648          
 649          void EnableDaliRxTimerInt()
 650          {
 651   1              IE |= IE_ET1__ENABLED;
 652   1      }
 653          
 654          void DisableDaliRxTimerInt()
 655          {
 656   1              IE &= 0xf7;
 657   1      }
 658          
 659          
 660          void ReloadDaliRxTimer(uint8_t reloadH, uint8_t reloadL)
 661          {
 662   1              TH1 = reloadH;
 663   1              TL1 = reloadL;
 664   1      }
 665          
 666          void ReloadnStartDaliRxTimer(uint8_t reloadH, uint8_t reloadL)
 667          {
 668   1              TH1 = reloadH;
 669   1              TL1 = reloadL;
 670   1              EnableDaliRxTimerInt();
 671   1              StartDaliRxTimer();
 672   1      }
C51 COMPILER V9.53.0.0   DALI                                                              04/20/2016 10:34:27 PAGE 12  

 673          
 674          void StopnDisableDaliRxTimer()
 675          {
 676   1      
 677   1              StopDaliRxTimer();
 678   1              DisableDaliRxTimerInt();
 679   1      }
 680          
 681          
 682          void StartDaliRxTimer()
 683          {
 684   1      
 685   1              TCON |= TCON_TR1__RUN;          //Enables Timer 1 Run
 686   1      }
 687          
 688          
 689          uint16_t GetDaliRxTimer()
 690          {
 691   1              return TH1|TL1;
 692   1      }
 693          
 694          
 695          void StopDaliRxTimer()
 696          {
 697   1      
 698   1              TH1 = 0;
 699   1              TL1 = 0;
 700   1              TCON |= TCON_TR1__STOP;         //Enables Timer 1 Run
 701   1      }
 702          
 703          void IsDaliBusQuiet()
 704          {
 705   1      
 706   1              if (GetDaliIntputPin()==1)
 707   1              {
 708   2      
 709   2                      if(GetBusQuietCounter()<=254) IncBusQuietCounter();
 710   2              }
 711   1              if (GetDaliIntputPin()==0)
 712   1              {
 713   2      
 714   2                      ClearBusQuietCounter();
 715   2              }
 716   1      }
 717          
 718          
 719          void IncBusQuietCounter()
 720          {
 721   1              BusQuietCounter++;
 722   1      }
 723          
 724          void ClearBusQuietCounter()
 725          {
 726   1              BusQuietCounter=0;
 727   1      }
 728          
 729          uint8_t GetBusQuietCounter()
 730          {
 731   1              return BusQuietCounter;
 732   1      }
 733          
 734          
 735          void SetDaliRxErrorFlag()
C51 COMPILER V9.53.0.0   DALI                                                              04/20/2016 10:34:27 PAGE 13  

 736          {
 737   1              DaliFlags.flag.Error = 1;
 738   1      }
 739          
 740          void ClearDaliRxErrorFlag()
 741          {
 742   1              DaliFlags.flag.Error = 0;
 743   1      }
 744          
 745          bit GetDaliRxErrorFlag()
 746          {
 747   1              return DaliFlags.flag.Error;
 748   1      }
 749          
 750          
 751          void SetDaliInputPinPolarity (INTPOLARITY input)
 752          {
 753   1              if (input==ACTIVE_HIGH) IT01CF |= 0x80;
 754   1              else IT01CF &=0x7f;
 755   1      }
 756          
 757          
 758          void EnableInt1 ()
 759          {
 760   1              IE |= 0x4;
 761   1      }
 762          
 763          void DisableInt1 ()
 764          {
 765   1              IE &= 0xfb;
 766   1      }
 767          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1122    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      6    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      6       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      4    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

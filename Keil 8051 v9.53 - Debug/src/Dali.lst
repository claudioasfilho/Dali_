C51 COMPILER V9.53.0.0   DALI                                                              04/20/2016 15:49:43 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE DALI
OBJECT MODULE PLACED IN .\src\Dali.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v3_3\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\clfil
                    -ho\Dropbox (Silicon Labs)\Code_Workspace_Dali\Dali_\src\Dali.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) 
                    -FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:/SiliconLabs/SimplicityStudio/v3_3
                    -/developer/sdks/si8051/v3//Device/shared/si8051Base;C:/SiliconLabs/SimplicityStudio/v3_3/developer/sdks/si8051/v3//Devic
                    -e/EFM8UB1;C:/SiliconLabs/SimplicityStudio/v3_3/developer/sdks/si8051/v3//Device/EFM8UB1/inc;C:\SiliconLabs\SimplicityStu
                    -dio\v3_4a\developer\sdks\si8051\v3\Device\EFM8UB1\inc) PRINT(.\src\Dali.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.
                    -\src\Dali.OBJ)

line level    source

   1          //-----------------------------------------------------------------------------
   2          // Dali.c
   3          //-----------------------------------------------------------------------------
   4          // Copyright 2014 Silicon Laboratories, Inc.
   5          // http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   6          //
   7          // Program Description:
   8          //
   9          // This program uses Timer0 in 8-bit counter/timer with reload mode.
  10          // It uses the Timer0 to create an interrupt at a certain rate and toggles
  11          // the LED when the interrupt counter reaches the selected value. 
  12          //
  13          // Resources:
  14          //   SYSCLK - 24.5 MHz HFOSC0 / 8
  15          //   Timer0 - 10 Hz interrupt
  16          //   P1.4   - LED green
  17          //   P2.3   - Display enable
  18          //
  19          //-----------------------------------------------------------------------------
  20          // How To Test: EFM8UB1 STK
  21          //-----------------------------------------------------------------------------
  22          // 1) Place the switch in "AEM" mode.
  23          // 2) Connect the EFM8UB1 STK board to a PC using a mini USB cable.
  24          // 3) Compile and download code to the EFM8UB1 STK board.
  25          //    In Simplicity Studio IDE, select Run -> Debug from the menu bar,
  26          //    click the Debug button in the quick menu, or press F11.
  27          // 4) Run the code.
  28          //    In Simplicity Studio IDE, select Run -> Resume from the menu bar,
  29          //    click the Resume button in the quick menu, or press F8.
  30          // 5) Check that the green LED is blinking.
  31          //
  32          // Target:         EFM8UB1
  33          // Tool chain:     Generic
  34          //
  35          // Release 0.1 (ST)
  36          //    - Initial Revision
  37          //    - 10 OCT 2014
  38          //
  39          
  40          //-----------------------------------------------------------------------------
  41          // Includes
  42          //-----------------------------------------------------------------------------
  43          #include <SI_EFM8UB1_Register_Enums.h>
  44          #include "InitDevice.h"
  45          #include "Dali.h"
  46          
  47          
  48          
  49          
  50          //bit MDone;
C51 COMPILER V9.53.0.0   DALI                                                              04/20/2016 15:49:43 PAGE 2   

  51          //bit MOutput;
  52          //bit DaliStopFlag;
  53          //bit DaliErrorFlag;
  54          
  55          static xdata DALIFLAGS DaliFlags;
  56          static xdata DALIRXREGISTERS DaliRXReg;
  57          
  58          /*********************************************************************************
  59           *********************************************************************************
  60                                                   Manchester Encoder Related Functions
  61           *********************************************************************************
  62           *********************************************************************************/
  63          
  64          
  65          /*Manchester Decoder Busy Flag Getters and Setters*/
  66          
  67          void SetBusyFlag()
  68          {
  69   1              DaliFlags.flag.Busy = 1;
  70   1      }
  71          
  72          void ClearBusyFlag()
  73          {
  74   1              DaliFlags.flag.Busy = 0;
  75   1      }
  76          
  77          bit GetBusyFlag()
  78          {
  79   1       return DaliFlags.flag.Busy;
  80   1      }
  81          
  82          /*Manchester Decoder Output Flag Getters and Setters*/
  83          
  84          void SetMDOutput()
  85          {
  86   1              DaliFlags.flag.Output =1;
  87   1      }
  88          
  89          void ClearMDOutput()
  90          {
  91   1              DaliFlags.flag.Output =0;
  92   1      }
  93          
  94          bit GetMDOutput()
  95          {
  96   1       return DaliFlags.flag.Output;
  97   1      }
  98          
  99          
 100          void ManchesterEncoder (uint8_t input)
 101          {
 102   1              static BITS_BYTE Input;
 103   1      
 104   1              static int8_t counter = 8;                              //It uses 8 steps because it sends 7 bits and stills needs the time to conc
             -lude the last bit before it loads the counter again
 105   1      
 106   1              ClearBusyFlag();
 107   1      
 108   1              if (counter==8)
 109   1              {
 110   2                      Input.Abyte = input;
 111   2              }
 112   1      
C51 COMPILER V9.53.0.0   DALI                                                              04/20/2016 15:49:43 PAGE 3   

 113   1              while (counter>=0)
 114   1              {
 115   2                      while(GetBusyFlag()==1);
 116   2      
 117   2                      if (GetBusyFlag()==0)
 118   2                      {
 119   3                              switch (counter--){
 120   4      
 121   4                                                              case 0: //SetBusyFlag();
 122   4                                                              break;
 123   4                                                              case 1: DaliFlags.flag.Output = Input.nybble.BB0;
 124   4                                                              SetBusyFlag();
 125   4                                                              break;
 126   4                                                              case 2: DaliFlags.flag.Output = Input.nybble.BB1;
 127   4                                                              SetBusyFlag();
 128   4                                                              break;
 129   4                                                              case 3: DaliFlags.flag.Output = Input.nybble.BB2;
 130   4                                                              SetBusyFlag();
 131   4                                                              break;
 132   4                                                              case 4: DaliFlags.flag.Output = Input.nybble.BB3;
 133   4                                                              SetBusyFlag();
 134   4                                                              break;
 135   4                                                              case 5: DaliFlags.flag.Output = Input.nybble.BB4;
 136   4                                                              SetBusyFlag();
 137   4                                                              break;
 138   4                                                              case 6: DaliFlags.flag.Output = Input.nybble.BB5;
 139   4                                                              SetBusyFlag();
 140   4                                                              break;
 141   4                                                              case 7: DaliFlags.flag.Output = Input.nybble.BB6;
 142   4                                                              SetBusyFlag();
 143   4                                                              break;
 144   4                                                              case 8: DaliFlags.flag.Output = Input.nybble.BB7;
 145   4                                                              SetBusyFlag();
 146   4                                                              break;
 147   4                                      }
 148   3      
 149   3      
 150   3                      }
 151   2      
 152   2              }
 153   1      
 154   1              counter=8;
 155   1      
 156   1      }
 157          
 158          /*********************************************************************************
 159           *********************************************************************************
 160                                                   Dali TX Related Functions
 161           *********************************************************************************
 162           *********************************************************************************/
 163          
 164          void DaliTxHandler()
 165          {
 166   1              static uint8_t counter = 0;
 167   1              static uint8_t evcounter = 0;
 168   1      
 169   1              if (GetBusyFlag())
 170   1              {
 171   2                      if (evcounter++==15)
 172   2                              {evcounter=0;}
 173   2                      if (GetDaliStopFlag()==0)               //Are these the Stop Bits?
 174   2                      {
 175   3      
C51 COMPILER V9.53.0.0   DALI                                                              04/20/2016 15:49:43 PAGE 4   

 176   3                              //The next lines implement the two steps of the Manchester Decoding
 177   3                              if (counter==0)                                 //Process First Part of the Byte
 178   3                              {
 179   4                                      if (GetMDOutput()==0) SetDaliOutputPin();
 180   4                                      else ClearDaliOutputPin();
 181   4                                      counter++;
 182   4                              }
 183   3                              else
 184   3                              {                                                               //Process 2nd Part of the Byte
 185   4      
 186   4                                      if (GetMDOutput()==0) ClearDaliOutputPin();
 187   4                                      else SetDaliOutputPin();
 188   4                                      counter=0;
 189   4      
 190   4                                      ClearBusyFlag();                //Finished Processing Byte for Manchester Encoder
 191   4                              }
 192   3      
 193   3                      }
 194   2                      else                            //Yes, This is the Stop bits stage
 195   2                              {
 196   3                                      if (counter++<4)        SetDaliOutputPin();             //It keeps the Output High for 4 Cycles of the Timer
 197   3                                      else{
 198   4                                                      SetDaliOutputPin();             //The Line is normally High;
 199   4                                                      counter=0;
 200   4                                                      ClearDaliStopFlag();
 201   4                                                      ClearBusyFlag();                //Finished Processing Byte for Manchester Encoder
 202   4                                              }
 203   3                              }
 204   2                      }
 205   1      
 206   1      }
 207          
 208          
 209          void ReloadDaliTxTimer(uint8_t reloadH, uint8_t reloadL)
 210          {
 211   1              TH0 = reloadH;
 212   1              TL0 = reloadL;
 213   1      }
 214          
 215          
 216          void StartDaliTxTimer()
 217          {
 218   1      
 219   1              TCON |= TCON_TR0__RUN;          //Enables Timer 1 Run
 220   1      }
 221          
 222          
 223          uint16_t GetDaliTxTimer()
 224          {
 225   1              return TH0|TL0;
 226   1      }
 227          
 228          
 229          void StopDaliTxTimer()
 230          {
 231   1      
 232   1              TH1 = 0;
 233   1              TL1 = 0;
 234   1              TCON |= TCON_TR0__STOP;         //Enables Timer 1 Run
 235   1      }
 236          
 237          
 238          void DaliFrameStart()
C51 COMPILER V9.53.0.0   DALI                                                              04/20/2016 15:49:43 PAGE 5   

 239          {
 240   1              ClearBusyFlag();                                //Clear Flag that indicates the Manchester Decoder is Busy on the Interrupt
 241   1              SetMDOutput();
 242   1              SetBusyFlag();                                  //Sets the Busy Flag so the Bit can be processed
 243   1              while(GetBusyFlag()==1);                //Waits until the Bit gets transmitted
 244   1      
 245   1      }
 246          
 247          void DaliFrameStop()
 248          {
 249   1              ClearBusyFlag();                //Clear Flag that indicates the Manchester Decoder is Busy on the Interrupt
 250   1              SetDaliStopFlag();
 251   1              SetBusyFlag();                  //Sets the Busy Flag so the Bit can be processed
 252   1              while(GetBusyFlag()==1);                //Waits until the Bit gets transmitted
 253   1      
 254   1      }
 255          
 256          void DaliTXStateMachine(uint8_t address, uint8_t Ddata)
 257          {
 258   1              DALI_FRAME States;
 259   1      
 260   1              SetDaliOutputPin();                     //The Line is Normally High
 261   1              States = START;
 262   1      
 263   1              while (States<END)
 264   1              {
 265   2                      switch (States)
 266   2                      {
 267   3                              case START: {
 268   4                                                              DaliFrameStart();
 269   4                                                              States= ADDRESS;
 270   4                                                              break;
 271   4                                                      }
 272   3      
 273   3                              case ADDRESS: {
 274   4                                                              ManchesterEncoder(address);
 275   4                                                              States= DATA;
 276   4                                                              break;
 277   4                                                      }
 278   3      
 279   3                              case DATA: {
 280   4                                                              ManchesterEncoder(Ddata);
 281   4                                                              States= STOP;
 282   4                                                              break;
 283   4                                                      }
 284   3      
 285   3                              case STOP: {
 286   4                                                              DaliFrameStop();
 287   4                                                              States= END;
 288   4                                                              break;
 289   4                                                      }
 290   3      
 291   3                      }
 292   2              }
 293   1      
 294   1      }
 295          /*Dali Stop bit Flag Getters and Setters*/
 296          
 297          void SetDaliStopFlag()
 298          {
 299   1              DaliFlags.flag.Stop =1;
 300   1      }
 301          
C51 COMPILER V9.53.0.0   DALI                                                              04/20/2016 15:49:43 PAGE 6   

 302          void ClearDaliStopFlag()
 303          {
 304   1              DaliFlags.flag.Stop =0;
 305   1      }
 306          
 307          bit GetDaliStopFlag()
 308          {
 309   1       return DaliFlags.flag.Stop;
 310   1      }
 311          
 312          
 313          void SetDaliOutputPin()
 314          {
 315   1              DALI_OUT=1;
 316   1      }
 317          
 318          void ClearDaliOutputPin()
 319          {
 320   1              DALI_OUT=0;
 321   1      }
 322          
 323          bit GetDaliOutputPin()
 324          {
 325   1       return DALI_OUT;
 326   1      }
 327          
 328          
 329          /*********************************************************************************
 330           *********************************************************************************
 331                                                   Dali RX Related Functions
 332           *********************************************************************************
 333           *********************************************************************************/
 334          uint8_t BusQuietCounter;
 335          
 336          bit _1stQ;
 337          bit _2ndQ;
 338          bit _3rdQ;
 339          bit _4thQ;
 340          
 341          static xdata DALI_FRAME ERRORLOG = IDLE;
 342          
 343          
 344          
 345          DALI_FRAME startconditionbitDemodulation()
 346          {
 347   1              static xdata DALI_DEMOD bitState = _1qB;
 348   1      
 349   1              switch (bitState)
 350   1              {
 351   2                      case _1qB: //This is Triggered by the INT1_ISR
 352   2                      {
 353   3                              if((GetDaliIntputPin()==DALI_LOGIC_0))
 354   3                              {
 355   4      
 356   4                                      //_1stQ = GetDaliIntputPin();
 357   4                                      ReloadnStartDaliRxTimer(STMH, STML);
 358   4                                      bitState = _2qB;
 359   4                                      //ToogleTestLed();
 360   4                              }
 361   3                              break;
 362   3                      }
 363   2      
 364   2                      case _2qB: //This is Triggered by the TIMER1_ISR
C51 COMPILER V9.53.0.0   DALI                                                              04/20/2016 15:49:43 PAGE 7   

 365   2                      {
 366   3                              if((GetDaliIntputPin()==DALI_LOGIC_0))
 367   3                              {
 368   4      
 369   4                                      //_2ndQ = GetDaliIntputPin();
 370   4                                      StopnDisableDaliRxTimer();
 371   4                                      SetDaliInputPinPolarity(ACTIVE_HIGH);
 372   4                                      EnableInt1();
 373   4                                      bitState = _3qB;
 374   4                                      //ToogleTestLed();
 375   4                              }
 376   3                              else
 377   3                              {
 378   4                                      StopnDisableDaliRxTimer();
 379   4                              bitState = _1qB;
 380   4                              }
 381   3                              break;
 382   3                      }
 383   2      
 384   2                      case _3qB: //This is Triggered by the TIMER1_ISR
 385   2                      {
 386   3                              if((GetDaliIntputPin()==DALI_LOGIC_1))
 387   3                              {
 388   4      
 389   4                                      //_3rdQ = GetDaliIntputPin();
 390   4                                      ReloadnStartDaliRxTimer(STMH, STML);
 391   4                                      bitState = _4qB;
 392   4                                      //ToogleTestLed();
 393   4      
 394   4                              }
 395   3                              break;
 396   3      
 397   3                      }
 398   2                      case _4qB: //This is Triggered by the TIMER1_ISR, once completed successfully it disables the INT1 and i
             -t uses the Timer to check the DALI_IN State
 399   2                      {
 400   3                              if((GetDaliIntputPin()==DALI_LOGIC_1))
 401   3                              {
 402   4      
 403   4                                      //_4thQ = GetDaliIntputPin();
 404   4                                      DisableInt1();
 405   4                                      ReloadnStartDaliRxTimer(STMH, STML);
 406   4                                      bitState = _1qB;
 407   4                                      //ToogleTestLed();
 408   4                                      return ADDRESS; //Processing is done. It resets this state machine and moves the main state machine to
             - the next state
 409   4                              }
 410   3                              else
 411   3                              {
 412   4                                      //Something is wrong with the Data, it resets the INT trigger and Disables Timer
 413   4                                      StopnDisableDaliRxTimer();
 414   4                                      SetDaliInputPinPolarity(ACTIVE_LOW);
 415   4                                      EnableInt1();
 416   4                                      StopnDisableDaliRxTimer();
 417   4                                      bitState = _1qB;
 418   4                                      return IDLE;
 419   4                              }
 420   3                              break;
 421   3                      }
 422   2      
 423   2              }
 424   1      
 425   1              return START; //Still Processing the Bit
C51 COMPILER V9.53.0.0   DALI                                                              04/20/2016 15:49:43 PAGE 8   

 426   1      }
 427          
 428          DALI_FRAME stopconditionbitverify()
 429          {
 430   1              static xdata DALI_DEMOD bitState = _1qB;
 431   1      
 432   1              switch (bitState)
 433   1              {
 434   2                      case _1qB: //This is Triggered by the TIMER1_ISR
 435   2                      {
 436   3                              if((GetDaliIntputPin()==DALI_LOGIC_1))
 437   3                              {
 438   4      
 439   4                                      _1stQ = GetDaliIntputPin();
 440   4                                      ReloadDaliRxTimer(TMH, TML);
 441   4                                      bitState = _2qB;
 442   4                                      ToogleTestLed1();
 443   4                              }
 444   3                              else //If the bit is corrupted, the device goes to ERRORRESET MODE
 445   3                              {
 446   4                                      return ERRORRESET;
 447   4                              }
 448   3                              break;
 449   3                      }
 450   2      
 451   2                      case _2qB: //This is Triggered by the TIMER1_ISR
 452   2                      {
 453   3                              if((GetDaliIntputPin()==DALI_LOGIC_1))
 454   3                              {
 455   4      
 456   4                                      _2ndQ = GetDaliIntputPin();
 457   4                                      ReloadDaliRxTimer(TMH, TML);
 458   4                                      bitState = _3qB;
 459   4                                      ToogleTestLed1();
 460   4                              }
 461   3                              else //If the bit is corrupted, the device goes to ERRORRESET MODE
 462   3                              {
 463   4                                      return ERRORRESET;
 464   4                              }
 465   3                              break;
 466   3                      }
 467   2      
 468   2                      case _3qB: //This is Triggered by the TIMER1_ISR
 469   2                      {
 470   3                              if((GetDaliIntputPin()==DALI_LOGIC_1))
 471   3                              {
 472   4      
 473   4                                      _3rdQ = GetDaliIntputPin();
 474   4                                      ReloadDaliRxTimer(TMH, TML);
 475   4                                      bitState = _4qB;
 476   4                                      ToogleTestLed1();
 477   4      
 478   4                              }
 479   3                              else //If the bit is corrupted, the device goes to ERRORRESET MODE
 480   3                              {
 481   4                                      return ERRORRESET;
 482   4                              }
 483   3                              break;
 484   3      
 485   3                      }
 486   2                      case _4qB: //This is Triggered by the TIMER1_ISR, once completed successfully it disables the INT1 and i
             -t uses the Timer to check the DALI_IN State
 487   2                      {
C51 COMPILER V9.53.0.0   DALI                                                              04/20/2016 15:49:43 PAGE 9   

 488   3                              if((GetDaliIntputPin()==DALI_LOGIC_1))
 489   3                              {
 490   4      
 491   4                                      _4thQ = GetDaliIntputPin();
 492   4                                      bitState = _1qB;
 493   4                                      ToogleTestLed1();
 494   4                                      return END; //Processing is done. It resets this state machine and moves the main state machine to the
             - next state
 495   4                              }
 496   3                              else //If the bit is corrupted, the device goes to ERRORRESET MODE
 497   3                                      {
 498   4                                              return ERRORRESET;
 499   4                                      }
 500   3                              break;
 501   3                      }
 502   2      
 503   2              }
 504   1      
 505   1              return STOP; //Still Processing the Bit
 506   1      }
 507          
 508          
 509          bit bitDemodulation()
 510          {
 511   1              static xdata DALI_DEMOD bitState = _1qB;
 512   1      
 513   1              switch (bitState)
 514   1                      {
 515   2                              case _1qB: //This is Triggered by the TIMER1_ISR
 516   2                              {
 517   3      
 518   3                                      _1stQ = GetDaliIntputPin();
 519   3                                      ReloadnStartDaliRxTimer(STMH, STML);
 520   3                                      bitState = _2qB;
 521   3                                      //ToogleTestLed1();
 522   3                                      break;
 523   3                              }
 524   2      
 525   2                              case _2qB: //This is Triggered by the TIMER1_ISR
 526   2                              {
 527   3                                      _2ndQ = GetDaliIntputPin();
 528   3                                      ReloadnStartDaliRxTimer(STMH, STML);
 529   3                                      bitState = _3qB;
 530   3                                      //ToogleTestLed2();
 531   3                                      break;
 532   3                              }
 533   2      
 534   2                              case _3qB: //This is Triggered by the TIMER1_ISR
 535   2                              {
 536   3      
 537   3                                      _3rdQ = GetDaliIntputPin();
 538   3                                      ReloadnStartDaliRxTimer(STMH, STML);
 539   3                                      bitState = _4qB;
 540   3                                      //ToogleTestLed3();
 541   3                                      break;
 542   3      
 543   3                              }
 544   2                              case _4qB: //This is Triggered by the TIMER1_ISR
 545   2                              {
 546   3      
 547   3                                      _4thQ = GetDaliIntputPin();
 548   3                                      ReloadnStartDaliRxTimer(STMH, STML);
 549   3                                      bitState = _1qB;
C51 COMPILER V9.53.0.0   DALI                                                              04/20/2016 15:49:43 PAGE 10  

 550   3                                      //ToogleTestLed4();
 551   3                                      return 1; //Processing is done. It resets this state machine and informs user the bit information is a
             -vailable
 552   3                                      break;
 553   3                              }
 554   2                      }
 555   1              return 0;       //Still Processing the Bit
 556   1      
 557   1      }
 558          
 559          //This Function returns the Logic level of the Bit read by the bitDemodulation() function and it clears th
             -e "Quarter" bits. If the bit is invalid, it returns -1
 560          int isbitHighorLow()
 561          {
 562   1              int output=-1;
 563   1      
 564   1              if ((_1stQ==DALI_LOGIC_0) && (_2ndQ==DALI_LOGIC_0) && (_3rdQ==DALI_LOGIC_1) && (_4thQ==DALI_LOGIC_1)) out
             -put = 1;
 565   1              else if ((_1stQ==DALI_LOGIC_1) && (_2ndQ==DALI_LOGIC_1) && (_3rdQ==DALI_LOGIC_0) && (_4thQ==DALI_LOGIC_0)
             -) output = 0;
 566   1      
 567   1              //It Resets the "Global" bits (File Scope only) that are used to store the data read from the GPIO
 568   1              _1stQ=0;
 569   1              _2ndQ=0;
 570   1              _3rdQ=0;
 571   1              _4thQ=0;
 572   1      
 573   1              return output;
 574   1      }
 575          
 576          
 577          void DaliRXDecoding()
 578          {
 579   1              static xdata DALI_FRAME State = IDLE;
 580   1      
 581   1      
 582   1              static xdata BITS_BYTE DaliData;                //Variable used to temporarily store the bits being read from the Dali 
             -Command
 583   1              static xdata uint8_t bitscounter=7;             //Keeps the position of the current bit being read
 584   1              int bitread=0;                                                  //Used to store the current bit being read. if the value is -1, it means the data wa
             -s invalid
 585   1      
 586   1      
 587   1              switch (State)
 588   1      
 589   1                              {
 590   2      
 591   2                                      case IDLE:                      //In this state, it checks if the RX bus was quite and also if it receives the start bit
 592   2                                                              {
 593   3                                                                      if (GetBusQuietCounter()>1) State = START;
 594   3                                                                      DaliData.Abyte=0;
 595   3                                                                      DaliFlags.DRegister=0;          //It resets all the Flags
 596   3                                                                      DaliFlags.flag.Busy=1;          //It sets the Flag indicating the Dali Rx is busy
 597   3      
 598   3                                                                      //This Jumps straight to the next State on the State Machine so we don't loose a cycle, it purp
             -osely doesn't have a break
 599   3                                                              }
 600   2      
 601   2                                      case START:                     //In this state, it checks if the RX bus was quite and also if it receives the start bit
 602   2                                                              {
 603   3                                                                      State = startconditionbitDemodulation();
 604   3                                                                      break;
 605   3                                                              }
C51 COMPILER V9.53.0.0   DALI                                                              04/20/2016 15:49:43 PAGE 11  

 606   2      
 607   2                                      case ADDRESS:                   //In this state, it gets the Data coming from the Dali Packet and load it to the Ad
             -dress Register and to the Data Register
 608   2                                      case DATA:
 609   2                                                      {
 610   3      
 611   3                                                              if (bitDemodulation())  //Is Demodulation done for the bit?
 612   3                                                                      {
 613   4                                                                              bitread = isbitHighorLow();
 614   4      
 615   4                                                                              if (bitread!=-1)
 616   4                                                                              {
 617   5                                                                                      switch (bitscounter)
 618   5                                                                                      {
 619   6                                                                                              case 0: DaliData.nybble.BB0 = bitread;
 620   6                                                                                                              break;
 621   6      
 622   6                                                                                              case 1: DaliData.nybble.BB1 = bitread;
 623   6                                                                                                              break;
 624   6      
 625   6                                                                                              case 2: DaliData.nybble.BB2 = bitread;
 626   6                                                                                                              break;
 627   6      
 628   6                                                                                              case 3: DaliData.nybble.BB3 = bitread;
 629   6                                                                                                              break;
 630   6      
 631   6                                                                                              case 4: DaliData.nybble.BB4 = bitread;
 632   6                                                                                                              break;
 633   6      
 634   6                                                                                              case 5: DaliData.nybble.BB5 = bitread;
 635   6                                                                                                              break;
 636   6      
 637   6                                                                                              case 6: DaliData.nybble.BB6 = bitread;
 638   6                                                                                                              break;
 639   6      
 640   6                                                                                              case 7: DaliData.nybble.BB7 = bitread;
 641   6                                                                                                              break;
 642   6                                                                                      }
 643   5                                                                                      if(bitscounter--==0)
 644   5                                                                                      {
 645   6      
 646   6                                                                                              bitscounter=7;
 647   6                                                                                              if (State==ADDRESS)
 648   6                                                                                              {
 649   7                                                                                                      DaliRXReg.Address= DaliData.Abyte;
 650   7                                                                                                      State=DATA;
 651   7                                                                                              }
 652   6                                                                                              else
 653   6                                                                                              {
 654   7                                                                                                      DaliRXReg.Data= DaliData.Abyte;
 655   7                                                                                                      State= STOP;
 656   7                                                                                                      ReloadnStartDaliRxTimer(TMH,TML); //Reloads the Timer for the STOP bit condition
 657   7      
 658   7                                                                                              }
 659   6      
 660   6                                                                                      }
 661   5      
 662   5                                                                              }
 663   4      
 664   4                                                                              else //If any of the bits is corrupted, the device goes to ERRORRESET MODE
 665   4                                                                              {
 666   5                                                                                      State = ERRORRESET;
 667   5                                                                              }
C51 COMPILER V9.53.0.0   DALI                                                              04/20/2016 15:49:43 PAGE 12  

 668   4                                                              }
 669   3                                                              break;
 670   3                                                      }
 671   2                                      case STOP:                      //In this state, it checks if the RX bus was quite and also if it receives the start bit
 672   2                                                              {
 673   3                                                                      State = stopconditionbitverify();
 674   3                                                                      break;
 675   3                                                              }
 676   2                                      case END:                       //In this state, it Resets the state machine and Turn on the Data Ready Flag
 677   2                                                              {
 678   3                                                                      State = IDLE;
 679   3      
 680   3                                                                      StopnDisableDaliRxTimer();
 681   3                                                                      SetDaliInputPinPolarity(ACTIVE_LOW);
 682   3                                                                      EnableInt1();
 683   3                                                                      DaliFlags.flag.Dataready = 1;
 684   3                                                                      break;
 685   3                                                              }
 686   2      
 687   2                                      case ERRORRESET:                        //In this state, it Resets the state machine and Turn on the Data Ready Flag
 688   2                                                              {
 689   3                                                                      State = IDLE;
 690   3                                                                      ToogleTestLed1();
 691   3                                                                      StopnDisableDaliRxTimer();
 692   3                                                                      SetDaliInputPinPolarity(ACTIVE_LOW);
 693   3                                                                      EnableInt1();
 694   3                                                                      DaliFlags.flag.Error = 1;
 695   3                                                                      break;
 696   3                                                              }
 697   2      
 698   2                                      default: State=IDLE;
 699   2      
 700   2      
 701   2      
 702   2                              }
 703   1      }
 704          
 705          
 706          bit GetDaliIntputPin()
 707          {
 708   1       return DALI_IN;
 709   1      }
 710          
 711          void EnableDaliRxTimerInt()
 712          {
 713   1              IE |= IE_ET1__ENABLED;
 714   1      }
 715          
 716          void DisableDaliRxTimerInt()
 717          {
 718   1              IE &= 0xf7;
 719   1      }
 720          
 721          
 722          void ReloadDaliRxTimer(uint8_t reloadH, uint8_t reloadL)
 723          {
 724   1              TH1 = reloadH;
 725   1              TL1 = reloadL;
 726   1      }
 727          
 728          void ReloadnStartDaliRxTimer(uint8_t reloadH, uint8_t reloadL)
 729          {
 730   1              TH1 = reloadH;
C51 COMPILER V9.53.0.0   DALI                                                              04/20/2016 15:49:43 PAGE 13  

 731   1              TL1 = reloadL;
 732   1              EnableDaliRxTimerInt();
 733   1              StartDaliRxTimer();
 734   1      }
 735          
 736          void StopnDisableDaliRxTimer()
 737          {
 738   1      
 739   1              StopDaliRxTimer();
 740   1              DisableDaliRxTimerInt();
 741   1      }
 742          
 743          
 744          void StartDaliRxTimer()
 745          {
 746   1      
 747   1              TCON |= TCON_TR1__RUN;          //Enables Timer 1 Run
 748   1      }
 749          
 750          
 751          uint16_t GetDaliRxTimer()
 752          {
 753   1              return TH1|TL1;
 754   1      }
 755          
 756          
 757          void StopDaliRxTimer()
 758          {
 759   1      
 760   1              TH1 = 0;
 761   1              TL1 = 0;
 762   1              TCON |= TCON_TR1__STOP;         //Enables Timer 1 Run
 763   1      }
 764          
 765          void IsDaliBusQuiet()
 766          {
 767   1      
 768   1              if (GetDaliIntputPin()==1)
 769   1              {
 770   2      
 771   2                      if(GetBusQuietCounter()<=254) IncBusQuietCounter();
 772   2              }
 773   1              if (GetDaliIntputPin()==0)
 774   1              {
 775   2      
 776   2                      ClearBusQuietCounter();
 777   2              }
 778   1      }
 779          
 780          
 781          void IncBusQuietCounter()
 782          {
 783   1              BusQuietCounter++;
 784   1      }
 785          
 786          void ClearBusQuietCounter()
 787          {
 788   1              BusQuietCounter=0;
 789   1      }
 790          
 791          uint8_t GetBusQuietCounter()
 792          {
 793   1              return BusQuietCounter;
C51 COMPILER V9.53.0.0   DALI                                                              04/20/2016 15:49:43 PAGE 14  

 794   1      }
 795          
 796          
 797          void SetDaliRxErrorFlag()
 798          {
 799   1              DaliFlags.flag.Error = 1;
 800   1      }
 801          
 802          void ClearDaliRxErrorFlag()
 803          {
 804   1              DaliFlags.flag.Error = 0;
 805   1      }
 806          
 807          bit GetDaliRxErrorFlag()
 808          {
 809   1              return DaliFlags.flag.Error;
 810   1      }
 811          
 812          
 813          void SetDaliInputPinPolarity (INTPOLARITY input)
 814          {
 815   1              if (input==ACTIVE_HIGH) IT01CF |= 0x80;
 816   1              else IT01CF &=0x7f;
 817   1      }
 818          
 819          
 820          void EnableInt1 ()
 821          {
 822   1              IE |= 0x4;
 823   1      }
 824          
 825          void DisableInt1 ()
 826          {
 827   1              IE &= 0xfb;
 828   1      }
 829          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1410    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     10    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      5       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      4    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

C51 COMPILER V9.53.0.0   DALI                                                              05/04/2016 14:55:59 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE DALI
OBJECT MODULE PLACED IN .\src\Dali.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v3_3\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\clfil
                    -ho\Dropbox (Silicon Labs)\Code_Workspace_Dali\Dali_\src\Dali.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) 
                    -FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:/SiliconLabs/SimplicityStudio/v3_3
                    -/developer/sdks/si8051/v3//Device/shared/si8051Base;C:/SiliconLabs/SimplicityStudio/v3_3/developer/sdks/si8051/v3//Devic
                    -e/EFM8UB1;C:/SiliconLabs/SimplicityStudio/v3_3/developer/sdks/si8051/v3//Device/EFM8UB1/inc;C:\SiliconLabs\SimplicityStu
                    -dio\v3_4a\developer\sdks\si8051\v3\Device\EFM8UB1\inc) PRINT(.\src\Dali.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.
                    -\src\Dali.OBJ)

line level    source

   1          //-----------------------------------------------------------------------------
   2          // Dali.c
   3          //-----------------------------------------------------------------------------
   4          // Copyright 2014 Silicon Laboratories, Inc.
   5          // http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   6          //
   7          // Program Description:
   8          //
   9          // This program uses Timer0 in 8-bit counter/timer with reload mode.
  10          // It uses the Timer0 to create an interrupt at a certain rate and toggles
  11          // the LED when the interrupt counter reaches the selected value. 
  12          //
  13          // Resources:
  14          //   SYSCLK - 24.5 MHz HFOSC0 / 8
  15          //   Timer0 - 10 Hz interrupt
  16          //   P1.4   - LED green
  17          //   P2.3   - Display enable
  18          //
  19          //-----------------------------------------------------------------------------
  20          // How To Test: EFM8UB1 STK
  21          //-----------------------------------------------------------------------------
  22          // 1) Place the switch in "AEM" mode.
  23          // 2) Connect the EFM8UB1 STK board to a PC using a mini USB cable.
  24          // 3) Compile and download code to the EFM8UB1 STK board.
  25          //    In Simplicity Studio IDE, select Run -> Debug from the menu bar,
  26          //    click the Debug button in the quick menu, or press F11.
  27          // 4) Run the code.
  28          //    In Simplicity Studio IDE, select Run -> Resume from the menu bar,
  29          //    click the Resume button in the quick menu, or press F8.
  30          // 5) Check that the green LED is blinking.
  31          //
  32          // Target:         EFM8UB1
  33          // Tool chain:     Generic
  34          //
  35          // Release 0.1 (ST)
  36          //    - Initial Revision
  37          //    - 10 OCT 2014
  38          //
  39          
  40          //-----------------------------------------------------------------------------
  41          // Includes
  42          //-----------------------------------------------------------------------------
  43          #include <SI_EFM8UB1_Register_Enums.h>
  44          #include "InitDevice.h"
  45          #include "Dali.h"
  46          
  47          
  48          
  49          
  50          //bit MDone;
C51 COMPILER V9.53.0.0   DALI                                                              05/04/2016 14:55:59 PAGE 2   

  51          //bit MOutput;
  52          //bit DaliStopFlag;
  53          //bit DaliErrorFlag;
  54          
  55          static xdata DALIFLAGS DaliFlags;
  56          static xdata DALIRXREGISTERS DaliRXReg;
  57          
  58          /*********************************************************************************
  59           *********************************************************************************
  60                                                   Manchester Encoder Related Functions
  61           *********************************************************************************
  62           *********************************************************************************/
  63          
  64          
  65          /*Manchester Decoder Busy Flag Getters and Setters*/
  66          
  67          void SetBusyFlag()
  68          {
  69   1              DaliFlags.flag.Busy = 1;
  70   1      }
  71          
  72          void ClearBusyFlag()
  73          {
  74   1              DaliFlags.flag.Busy = 0;
  75   1      }
  76          
  77          bit GetBusyFlag()
  78          {
  79   1       return DaliFlags.flag.Busy;
  80   1      }
  81          
  82          /*Manchester Decoder Output Flag Getters and Setters*/
  83          
  84          void SetMDOutput()                      //This function is processed by the ManchesterTXHandler and sets the DALI Output to L
             -ogic 1
  85          {                                                       //It is not setting the pin, but the logical state
  86   1              DaliFlags.flag.Output =1;
  87   1      }
  88          
  89          void ClearMDOutput()            //This function is processed by the ManchesterTXHandler and sets the DALI Output to 
             -Logic 0
  90          {
  91   1              DaliFlags.flag.Output =0;
  92   1      }
  93          
  94          bit GetMDOutput()
  95          {
  96   1       return DaliFlags.flag.Output;
  97   1      }
  98          
  99          
 100          void ManchesterEncoder (uint8_t input)
 101          {
 102   1              static BITS_BYTE Input;
 103   1      
 104   1              static int8_t counter = 8;                              //It uses 8 steps because it sends 7 bits and stills needs the time to conc
             -lude the last bit before it loads the counter again
 105   1      
 106   1              ClearBusyFlag();
 107   1      
 108   1              if (counter==8)
 109   1              {
 110   2                      Input.Abyte = input;
C51 COMPILER V9.53.0.0   DALI                                                              05/04/2016 14:55:59 PAGE 3   

 111   2              }
 112   1      
 113   1              while (counter>=0)
 114   1              {
 115   2                      while(GetBusyFlag()==1);
 116   2      
 117   2                      if (GetBusyFlag()==0)
 118   2                      {
 119   3                              switch (counter--){
 120   4      
 121   4                                                              case 0: //SetBusyFlag();
 122   4                                                              break;
 123   4                                                              case 1: DaliFlags.flag.Output = Input.nybble.BB0;
 124   4                                                              SetBusyFlag();
 125   4                                                              break;
 126   4                                                              case 2: DaliFlags.flag.Output = Input.nybble.BB1;
 127   4                                                              SetBusyFlag();
 128   4                                                              break;
 129   4                                                              case 3: DaliFlags.flag.Output = Input.nybble.BB2;
 130   4                                                              SetBusyFlag();
 131   4                                                              break;
 132   4                                                              case 4: DaliFlags.flag.Output = Input.nybble.BB3;
 133   4                                                              SetBusyFlag();
 134   4                                                              break;
 135   4                                                              case 5: DaliFlags.flag.Output = Input.nybble.BB4;
 136   4                                                              SetBusyFlag();
 137   4                                                              break;
 138   4                                                              case 6: DaliFlags.flag.Output = Input.nybble.BB5;
 139   4                                                              SetBusyFlag();
 140   4                                                              break;
 141   4                                                              case 7: DaliFlags.flag.Output = Input.nybble.BB6;
 142   4                                                              SetBusyFlag();
 143   4                                                              break;
 144   4                                                              case 8: DaliFlags.flag.Output = Input.nybble.BB7;
 145   4                                                              SetBusyFlag();
 146   4                                                              break;
 147   4                                      }
 148   3      
 149   3      
 150   3                      }
 151   2      
 152   2              }
 153   1      
 154   1              counter=8;
 155   1      
 156   1      }
 157          
 158          /*********************************************************************************
 159           *********************************************************************************
 160                                                   Dali TX Related Functions
 161           *********************************************************************************
 162           *********************************************************************************/
 163          
 164          void ManchesterTXHandler()
 165          {
 166   1              static uint8_t counter = 0;
 167   1              static uint8_t evcounter = 0;
 168   1      
 169   1              if (GetBusyFlag())
 170   1              {
 171   2                      if (evcounter++==15)
 172   2                              {evcounter=0;}
 173   2                      if (GetDaliStopFlag()==0)               //Are these the Stop Bits?
C51 COMPILER V9.53.0.0   DALI                                                              05/04/2016 14:55:59 PAGE 4   

 174   2                      {
 175   3      
 176   3                              //The next lines implement the two steps of the Manchester Decoding
 177   3                              if (counter==0)                                 //Process First Part of the Byte
 178   3                              {
 179   4                                      if (GetMDOutput()==0) SetDaliOutputPin();
 180   4                                      else ClearDaliOutputPin();
 181   4                                      counter++;
 182   4                              }
 183   3                              else
 184   3                              {                                                               //Process 2nd Part of the Byte
 185   4      
 186   4                                      if (GetMDOutput()==0) ClearDaliOutputPin();
 187   4                                      else SetDaliOutputPin();
 188   4                                      counter=0;
 189   4      
 190   4                                      ClearBusyFlag();                //Finished Processing Byte for Manchester Encoder
 191   4                              }
 192   3      
 193   3                      }
 194   2                      else                            //Yes, This is the Stop bits stage
 195   2                              {
 196   3                                      if (counter++<4)        SetDaliOutputPin();             //It keeps the Output High for 4 Cycles of the Timer
 197   3                                      else{
 198   4                                                      SetDaliOutputPin();             //The Line is normally High;
 199   4                                                      counter=0;
 200   4                                                      ClearDaliStopFlag();
 201   4                                                      ClearBusyFlag();                //Finished Processing Byte for Manchester Encoder
 202   4                                              }
 203   3                              }
 204   2                      }
 205   1      
 206   1      }
 207          
 208          
 209          void ReloadDaliTxTimer(uint8_t reloadH, uint8_t reloadL)
 210          {
 211   1              TH0 = reloadH;
 212   1              TL0 = reloadL;
 213   1      }
 214          
 215          
 216          void StartDaliTxTimer()
 217          {
 218   1      
 219   1              TCON |= TCON_TR0__RUN;          //Enables Timer 1 Run
 220   1      }
 221          
 222          
 223          uint16_t GetDaliTxTimer()
 224          {
 225   1              return TH0|TL0;
 226   1      }
 227          
 228          
 229          void StopDaliTxTimer()
 230          {
 231   1      
 232   1              TH1 = 0;
 233   1              TL1 = 0;
 234   1              TCON |= TCON_TR0__STOP;         //Enables Timer 1 Run
 235   1      }
 236          
C51 COMPILER V9.53.0.0   DALI                                                              05/04/2016 14:55:59 PAGE 5   

 237          
 238          void DaliFrameStart()
 239          {
 240   1              ClearBusyFlag();                                //Clear Flag that indicates the Manchester Decoder is Busy on the Interrupt
 241   1              SetMDOutput();
 242   1              SetBusyFlag();                                  //Sets the Busy Flag so the Bit can be processed
 243   1              while(GetBusyFlag()==1);                //Waits until the Bit gets transmitted
 244   1      
 245   1      }
 246          
 247          void DaliFrameStop()
 248          {
 249   1              ClearBusyFlag();                //Clear Flag that indicates the Manchester Decoder is Busy on the Interrupt
 250   1              SetDaliStopFlag();
 251   1              SetBusyFlag();                  //Sets the Busy Flag so the Bit can be processed
 252   1              while(GetBusyFlag()==1);                //Waits until the Bit gets transmitted
 253   1      
 254   1      }
 255          
 256          void DaliTXFrame(uint8_t address, uint8_t Ddata)
 257          {
 258   1              DALI_FRAME States;
 259   1      
 260   1              SetDaliOutputPin();                     //The Line is Normally High
 261   1              States = START;
 262   1      
 263   1              while (States<END)
 264   1              {
 265   2                      switch (States)
 266   2                      {
 267   3                              case START: {
 268   4                                                              DaliFrameStart();
 269   4                                                              States= ADDRESS;
 270   4                                                              break;
 271   4                                                      }
 272   3      
 273   3                              case ADDRESS: {
 274   4                                                              ManchesterEncoder(address);
 275   4                                                              States= DATA;
 276   4                                                              break;
 277   4                                                      }
 278   3      
 279   3                              case DATA: {
 280   4                                                              ManchesterEncoder(Ddata);
 281   4                                                              States= STOP;
 282   4                                                              break;
 283   4                                                      }
 284   3      
 285   3                              case STOP: {
 286   4                                                              DaliFrameStop();
 287   4                                                              States= END;
 288   4                                                              break;
 289   4                                                      }
 290   3      
 291   3                      }
 292   2              }
 293   1      
 294   1      }
 295          
 296          void DaliAnswerFrame(uint8_t Ddata)
 297          {
 298   1              DALI_FRAME States;
 299   1      
C51 COMPILER V9.53.0.0   DALI                                                              05/04/2016 14:55:59 PAGE 6   

 300   1              SetDaliOutputPin();                     //The Line is Normally High
 301   1              States = START;
 302   1      
 303   1              while (States<END)
 304   1              {
 305   2                      switch (States)
 306   2                      {
 307   3                              case START: {
 308   4                                                              DaliFrameStart();
 309   4                                                              States= DATA;
 310   4                                                              break;
 311   4                                                      }
 312   3      
 313   3                              case DATA: {
 314   4                                                              ManchesterEncoder(Ddata);
 315   4                                                              States= STOP;
 316   4                                                              break;
 317   4                                                      }
 318   3      
 319   3                              case STOP: {
 320   4                                                              DaliFrameStop();
 321   4                                                              States= END;
 322   4                                                              break;
 323   4                                                      }
 324   3      
 325   3                      }
 326   2              }
 327   1      
 328   1      }
 329          /*Dali Stop bit Flag Getters and Setters*/
 330          
 331          
 332          /*Dali Stop bit Flag Getters and Setters*/
 333          
 334          void SetDaliStopFlag()
 335          {
 336   1              DaliFlags.flag.Stop =1;
 337   1      }
 338          
 339          void ClearDaliStopFlag()
 340          {
 341   1              DaliFlags.flag.Stop =0;
 342   1      }
 343          
 344          bit GetDaliStopFlag()
 345          {
 346   1       return DaliFlags.flag.Stop;
 347   1      }
 348          
 349          void ClearDaliFlags()
 350          {
 351   1              DaliFlags.DRegister=0;
 352   1      }
 353          
 354          void SetDaliOutputPin()
 355          {
 356   1              DALI_OUT=1;
 357   1      }
 358          
 359          void ClearDaliOutputPin()
 360          {
 361   1              DALI_OUT=0;
 362   1      }
C51 COMPILER V9.53.0.0   DALI                                                              05/04/2016 14:55:59 PAGE 7   

 363          
 364          bit GetDaliOutputPin()
 365          {
 366   1       return DALI_OUT;
 367   1      }
 368          
 369          
 370          /*********************************************************************************
 371           *********************************************************************************
 372                                                   Dali RX Related Functions
 373           *********************************************************************************
 374           *********************************************************************************/
 375          uint8_t BusQuietCounter;
 376          
 377          bit _1stQ;
 378          bit _2ndQ;
 379          bit _3rdQ;
 380          bit _4thQ;
 381          
 382          static xdata DALI_FRAME ErrorLog = IDLE;
 383          
 384          
 385          DALI_FRAME startconditionbitDemodulation()
 386          {
 387   1              static xdata DALI_DEMOD bitState = _1qB;
 388   1      
 389   1      
 390   1              switch (bitState)
 391   1              {
 392   2                      case _1qB: //This is Triggered by the INT1_ISR
 393   2                      {
 394   3                              _1stQ = GetDaliIntputPin();
 395   3                              if((GetDaliIntputPin()==DALI_LOGIC_0))
 396   3                              {
 397   4      
 398   4                                      ReloadnStartDaliRxTimer(STMH, STML);
 399   4                                      bitState = _2qB;
 400   4                              }
 401   3                              else
 402   3                              {
 403   4                                      //Something is wrong with the Data, it Returns an Error
 404   4                                      bitState = _1qB;
 405   4                                      return ERRORRESET;
 406   4                              }
 407   3                              break;
 408   3                      }
 409   2      
 410   2                      case _2qB: //This is Triggered by the TIMER1_ISR
 411   2                      {
 412   3                              _2ndQ = GetDaliIntputPin();
 413   3                              if((GetDaliIntputPin()==DALI_LOGIC_0))
 414   3                              {
 415   4      
 416   4                                      StopnDisableDaliRxTimer();
 417   4                                      SetDaliInputPinPolarity(ACTIVE_HIGH);
 418   4                                      EnableInt1();
 419   4                                      bitState = _3qB;
 420   4      
 421   4                              }
 422   3                              else
 423   3                              {
 424   4                                      //Something is wrong with the Data, it Returns an Error
 425   4                                      bitState = _1qB;
C51 COMPILER V9.53.0.0   DALI                                                              05/04/2016 14:55:59 PAGE 8   

 426   4                                      return ERRORRESET;
 427   4                              }
 428   3                              break;
 429   3                      }
 430   2      
 431   2                      case _3qB: //This is Triggered by the TIMER1_ISR
 432   2                      {
 433   3                              _3rdQ = GetDaliIntputPin();
 434   3                              if((GetDaliIntputPin()==DALI_LOGIC_1))
 435   3                              {
 436   4      
 437   4      
 438   4                                      ReloadnStartDaliRxTimer(STMH, STML);
 439   4                                      bitState = _4qB;
 440   4      
 441   4      
 442   4                              }
 443   3                              else
 444   3                              {
 445   4                                      //Something is wrong with the Data, it Returns an Error
 446   4                                      bitState = _1qB;
 447   4                                      return ERRORRESET;
 448   4                              }
 449   3                              break;
 450   3      
 451   3                      }
 452   2                      case _4qB: //This is Triggered by the TIMER1_ISR, once completed successfully it disables the INT1 and i
             -t uses the Timer to check the DALI_IN State
 453   2                      {
 454   3                              _4thQ = GetDaliIntputPin();
 455   3                              if((GetDaliIntputPin()==DALI_LOGIC_1))
 456   3                              {
 457   4      
 458   4                                      DisableInt1();
 459   4                                      ReloadnStartDaliRxTimer(STMH, STML);
 460   4                                      bitState = _1qB;
 461   4      
 462   4                                      return ADDRESS; //Processing is done. It resets this state machine and moves the main state machine to
             - the next state
 463   4                              }
 464   3                              else
 465   3                              {
 466   4                                      //Something is wrong with the Data, it resets the INT trigger and Disables Timer
 467   4                                      bitState = _1qB;
 468   4                                      return ERRORRESET;
 469   4                              }
 470   3                              break;
 471   3                      }
 472   2      
 473   2              }
 474   1      
 475   1              return START; //Still Processing the Bit
 476   1      }
 477          
 478          DALI_FRAME stopconditionbitverify()
 479          {
 480   1              static xdata DALI_DEMOD bitState = _1qB;
 481   1      
 482   1      
 483   1              switch (bitState)
 484   1              {
 485   2                      case _1qB: //This is Triggered by the TIMER1_ISR
 486   2                      {
C51 COMPILER V9.53.0.0   DALI                                                              05/04/2016 14:55:59 PAGE 9   

 487   3                              if((GetDaliIntputPin()==DALI_LOGIC_1))
 488   3                              {
 489   4      
 490   4                                      _1stQ = GetDaliIntputPin();
 491   4                                      ReloadDaliRxTimer(TMH, TML);
 492   4                                      bitState = _2qB;
 493   4                              }
 494   3                              else //If the bit is corrupted, the device goes to ERRORRESET MODE
 495   3                              {
 496   4                                      bitState = _1qB;
 497   4                                      return ERRORRESET;
 498   4                              }
 499   3                              break;
 500   3                      }
 501   2      
 502   2                      case _2qB: //This is Triggered by the TIMER1_ISR
 503   2                      {
 504   3                              if((GetDaliIntputPin()==DALI_LOGIC_1))
 505   3                              {
 506   4      
 507   4                                      _2ndQ = GetDaliIntputPin();
 508   4                                      ReloadDaliRxTimer(TMH, TML);
 509   4                                      bitState = _3qB;
 510   4                              }
 511   3                              else //If the bit is corrupted, the device goes to ERRORRESET MODE
 512   3                              {
 513   4                                      bitState = _1qB;
 514   4                                      return ERRORRESET;
 515   4                              }
 516   3                              break;
 517   3                      }
 518   2      
 519   2                      case _3qB: //This is Triggered by the TIMER1_ISR
 520   2                      {
 521   3                              if((GetDaliIntputPin()==DALI_LOGIC_1))
 522   3                              {
 523   4      
 524   4                                      _3rdQ = GetDaliIntputPin();
 525   4                                      ReloadDaliRxTimer(TMH, TML);
 526   4                                      bitState = _4qB;
 527   4      
 528   4                              }
 529   3                              else //If the bit is corrupted, the device goes to ERRORRESET MODE
 530   3                              {
 531   4                                      bitState = _1qB;
 532   4                                      return ERRORRESET;
 533   4                              }
 534   3                              break;
 535   3      
 536   3                      }
 537   2                      case _4qB: //This is Triggered by the TIMER1_ISR, once completed successfully it disables the INT1 and i
             -t uses the Timer to check the DALI_IN State
 538   2                      {
 539   3                              if((GetDaliIntputPin()==DALI_LOGIC_1))
 540   3                              {
 541   4      
 542   4                                      _4thQ = GetDaliIntputPin();
 543   4                                      bitState = _1qB;
 544   4                                      return END; //Processing is done. It resets this state machine and moves the main state machine to the
             - next state
 545   4                              }
 546   3                              else //If the bit is corrupted, the device goes to ERRORRESET MODE
 547   3                                      {
C51 COMPILER V9.53.0.0   DALI                                                              05/04/2016 14:55:59 PAGE 10  

 548   4                                              bitState = _1qB;
 549   4                                              return ERRORRESET;
 550   4                                      }
 551   3                              break;
 552   3                      }
 553   2      
 554   2              }
 555   1      
 556   1              return STOP; //Still Processing the Bit
 557   1      }
 558          
 559          
 560          bit bitDemodulation()
 561          {
 562   1              static xdata DALI_DEMOD bitState = _1qB;
 563   1      
 564   1              switch (bitState)
 565   1                      {
 566   2                              case _1qB: //This is Triggered by the TIMER1_ISR
 567   2                              {
 568   3      
 569   3                                      _1stQ = GetDaliIntputPin();
 570   3                                      ReloadnStartDaliRxTimer(STMH, STML);
 571   3                                      bitState = _2qB;
 572   3                                      //ToogleTestLed1();
 573   3                                      break;
 574   3                              }
 575   2      
 576   2                              case _2qB: //This is Triggered by the TIMER1_ISR
 577   2                              {
 578   3                                      _2ndQ = GetDaliIntputPin();
 579   3                                      ReloadnStartDaliRxTimer(STMH, STML);
 580   3                                      bitState = _3qB;
 581   3                                      //ToogleTestLed2();
 582   3                                      break;
 583   3                              }
 584   2      
 585   2                              case _3qB: //This is Triggered by the TIMER1_ISR
 586   2                              {
 587   3      
 588   3                                      _3rdQ = GetDaliIntputPin();
 589   3                                      ReloadnStartDaliRxTimer(STMH, STML);
 590   3                                      bitState = _4qB;
 591   3                                      //ToogleTestLed3();
 592   3                                      break;
 593   3      
 594   3                              }
 595   2                              case _4qB: //This is Triggered by the TIMER1_ISR
 596   2                              {
 597   3      
 598   3                                      _4thQ = GetDaliIntputPin();
 599   3                                      ReloadnStartDaliRxTimer(STMH, STML);
 600   3                                      bitState = _1qB;
 601   3                                      //ToogleTestLed4();
 602   3                                      return 1; //Processing is done. It resets this state machine and informs user the bit information is a
             -vailable
 603   3                                      break;
 604   3                              }
 605   2                      }
 606   1              return 0;       //Still Processing the Bit
 607   1      
 608   1      }
 609          
C51 COMPILER V9.53.0.0   DALI                                                              05/04/2016 14:55:59 PAGE 11  

 610          //This Function returns the Logic level of the Bit read by the bitDemodulation() function and it clears th
             -e "Quarter" bits. If the bit is invalid, it returns -1
 611          int isbitHighorLow()
 612          {
 613   1              int output=-1;
 614   1      
 615   1              if ((_1stQ==DALI_LOGIC_0) && (_2ndQ==DALI_LOGIC_0) && (_3rdQ==DALI_LOGIC_1) && (_4thQ==DALI_LOGIC_1)) out
             -put = 1;
 616   1              else if ((_1stQ==DALI_LOGIC_1) && (_2ndQ==DALI_LOGIC_1) && (_3rdQ==DALI_LOGIC_0) && (_4thQ==DALI_LOGIC_0)
             -) output = 0;
 617   1      
 618   1              //It Resets the "Global" bits (File Scope only) that are used to store the data read from the GPIO
 619   1              _1stQ=0;
 620   1              _2ndQ=0;
 621   1              _3rdQ=0;
 622   1              _4thQ=0;
 623   1      
 624   1              return output;
 625   1      }
 626          
 627          
 628          
 629          bit GetDaliIntputPin()
 630          {
 631   1       return DALI_IN;
 632   1      }
 633          
 634          void EnableDaliRxTimerInt()
 635          {
 636   1              IE |= IE_ET1__ENABLED;
 637   1      }
 638          
 639          void DisableDaliRxTimerInt()
 640          {
 641   1              IE &= 0xf7;
 642   1      }
 643          
 644          
 645          void ReloadDaliRxTimer(uint8_t reloadH, uint8_t reloadL)
 646          {
 647   1              TH1 = reloadH;
 648   1              TL1 = reloadL;
 649   1      }
 650          
 651          void ReloadnStartDaliRxTimer(uint8_t reloadH, uint8_t reloadL)
 652          {
 653   1              TH1 = reloadH;
 654   1              TL1 = reloadL;
 655   1              EnableDaliRxTimerInt();
 656   1              StartDaliRxTimer();
 657   1      }
 658          
 659          void StopnDisableDaliRxTimer()
 660          {
 661   1      
 662   1              StopDaliRxTimer();
 663   1              DisableDaliRxTimerInt();
 664   1      }
 665          
 666          
 667          void StartDaliRxTimer()
 668          {
 669   1      
C51 COMPILER V9.53.0.0   DALI                                                              05/04/2016 14:55:59 PAGE 12  

 670   1              TCON |= TCON_TR1__RUN;          //Enables Timer 1 Run
 671   1      }
 672          
 673          
 674          uint16_t GetDaliRxTimer()
 675          {
 676   1              return TH1|TL1;
 677   1      }
 678          
 679          
 680          void StopDaliRxTimer()
 681          {
 682   1      
 683   1              TH1 = 0;
 684   1              TL1 = 0;
 685   1              TCON |= TCON_TR1__STOP;         //Enables Timer 1 Run
 686   1      }
 687          
 688          void IsDaliBusQuiet()
 689          {
 690   1      
 691   1              if (GetDaliIntputPin()==1)
 692   1              {
 693   2      
 694   2                      if(GetBusQuietCounter()<=254) IncBusQuietCounter();
 695   2              }
 696   1              if (GetDaliIntputPin()==0)
 697   1              {
 698   2      
 699   2                      ClearBusQuietCounter();
 700   2              }
 701   1      }
 702          
 703          
 704          void IncBusQuietCounter()
 705          {
 706   1              BusQuietCounter++;
 707   1      }
 708          
 709          void ClearBusQuietCounter()
 710          {
 711   1              BusQuietCounter=0;
 712   1      }
 713          
 714          uint8_t GetBusQuietCounter()
 715          {
 716   1              return BusQuietCounter;
 717   1      }
 718          
 719          
 720          void SetDaliRxErrorFlag()
 721          {
 722   1              DaliFlags.flag.Error = 1;
 723   1      }
 724          
 725          void ClearDaliRxErrorFlag()
 726          {
 727   1              DaliFlags.flag.Error = 0;
 728   1      }
 729          
 730          bit GetDaliRxErrorFlag()
 731          {
 732   1              return DaliFlags.flag.Error;
C51 COMPILER V9.53.0.0   DALI                                                              05/04/2016 14:55:59 PAGE 13  

 733   1      }
 734          
 735          void SetDaliDataReadyFlag()
 736          {
 737   1              DaliFlags.flag.Dataready = 1;
 738   1      }
 739          
 740          void ClearDaliDataReadyFlag()
 741          {
 742   1              DaliFlags.flag.Dataready = 0;
 743   1      }
 744          
 745          bit GetDaliDataReadyFlag()
 746          {
 747   1              return DaliFlags.flag.Dataready;
 748   1      }
 749          
 750          void SetDaliInputPinPolarity (INTPOLARITY input)
 751          {
 752   1              if (input==ACTIVE_HIGH) IT01CF |= 0x80;
 753   1              else IT01CF &=0x7f;
 754   1      }
 755          
 756          
 757          void EnableInt1 ()
 758          {
 759   1              TCON &= 0xF7; //Clearing the interrupt
 760   1              IE |= 0x4;
 761   1      }
 762          
 763          void DisableInt1 ()
 764          {
 765   1              IE &= 0xfb;
 766   1      }
 767          
 768          DALIRXREGISTERS GetDaliRXData()
 769          {
 770   1              return DaliRXReg;
 771   1      }
 772          
 773          void ClearDaliRXData()
 774          {
 775   1              DaliRXReg.Address=0;
 776   1              DaliRXReg.Data=0;
 777   1      }
 778          
 779          void DaliRXDecoding(int EntryMethod, DALIMODE mode)
 780          {
 781   1              static xdata DALI_FRAME State = IDLE;
 782   1              int Entry;
 783   1      
 784   1              static xdata BITS_BYTE DaliData;                //Variable used to temporarily store the bits being read from the Dali 
             -Command
 785   1              static xdata uint8_t bitscounter=7;             //Keeps the position of the current bit being read
 786   1              int bitread=0;                                                  //Used to store the current bit being read. if the value is -1, it means the data wa
             -s invalid
 787   1      
 788   1              Entry=EntryMethod;
 789   1      
 790   1              switch (State)
 791   1      
 792   1                              {
 793   2      
C51 COMPILER V9.53.0.0   DALI                                                              05/04/2016 14:55:59 PAGE 14  

 794   2                                      case IDLE:                      //In this state, it checks if the RX bus was quite and also if it receives the start bit
 795   2                                                              {
 796   3                                                                      if (GetBusQuietCounter()>1) State = START;
 797   3                                                                      DaliData.Abyte=0;
 798   3                                                                      DaliFlags.DRegister=0;          //It resets all the Flags
 799   3                                                                      DaliFlags.flag.RXBusy=1;                //It sets the Flag indicating the Dali Rx is busy
 800   3      
 801   3                                                                      //This Jumps straight to the next State on the State Machine so we don't loose a cycle, it purp
             -osely doesn't have a break
 802   3                                                              }
 803   2      
 804   2                                      case START:                     //In this state, it checks if the RX bus was quite and also if it receives the start bit
 805   2                                                              {
 806   3                                                                      State = startconditionbitDemodulation();
 807   3                                                                      if (State==ERRORRESET) ErrorLog = START;
 808   3                                                                      break;
 809   3                                                              }
 810   2      
 811   2                                      case ADDRESS:                   //In this state, it gets the Data coming from the Dali Packet and load it to the Ad
             -dress Register and to the Data Register
 812   2                                      case DATA:
 813   2                                                      {
 814   3      
 815   3                                                              if (bitDemodulation())  //Is Demodulation done for the bit?
 816   3                                                                      {
 817   4                                                                              bitread = isbitHighorLow();
 818   4      
 819   4                                                                              if (bitread!=-1)
 820   4                                                                              {
 821   5                                                                                      switch (bitscounter)
 822   5                                                                                      {
 823   6                                                                                              case 0: DaliData.nybble.BB0 = bitread;
 824   6                                                                                                              break;
 825   6      
 826   6                                                                                              case 1: DaliData.nybble.BB1 = bitread;
 827   6                                                                                                              break;
 828   6      
 829   6                                                                                              case 2: DaliData.nybble.BB2 = bitread;
 830   6                                                                                                              break;
 831   6      
 832   6                                                                                              case 3: DaliData.nybble.BB3 = bitread;
 833   6                                                                                                              break;
 834   6      
 835   6                                                                                              case 4: DaliData.nybble.BB4 = bitread;
 836   6                                                                                                              break;
 837   6      
 838   6                                                                                              case 5: DaliData.nybble.BB5 = bitread;
 839   6                                                                                                              break;
 840   6      
 841   6                                                                                              case 6: DaliData.nybble.BB6 = bitread;
 842   6                                                                                                              break;
 843   6      
 844   6                                                                                              case 7: DaliData.nybble.BB7 = bitread;
 845   6                                                                                                              break;
 846   6                                                                                      }
 847   5                                                                                      if(bitscounter--==0)
 848   5                                                                                      {
 849   6      
 850   6                                                                                              bitscounter=7;
 851   6                                                                                              if (State==ADDRESS)     //Reading Address
 852   6                                                                                              {
 853   7                                                                                                      DaliRXReg.Address= DaliData.Abyte;
 854   7      
C51 COMPILER V9.53.0.0   DALI                                                              05/04/2016 14:55:59 PAGE 15  

 855   7                                                                                                      if (mode==SLAVE_MODE)   State=DATA;
 856   7                                                                                                      else State=STOP;
 857   7                                                                                              }
 858   6                                                                                              else                            //Reading Data
 859   6                                                                                              {
 860   7                                                                                                      DaliRXReg.Data= DaliData.Abyte;
 861   7                                                                                                      State= STOP;
 862   7                                                                                                      ReloadnStartDaliRxTimer(TMH,TML); //Reloads the Timer for the STOP bit condition
 863   7      
 864   7                                                                                              }
 865   6      
 866   6                                                                                      }
 867   5      
 868   5                                                                              }
 869   4      
 870   4                                                                              else //If any of the bits is corrupted, the device goes to ERRORRESET MODE
 871   4                                                                              {
 872   5                                                                                      ErrorLog = State;
 873   5                                                                                      State = ERRORRESET;
 874   5      
 875   5                                                                              }
 876   4                                                              }
 877   3                                                              break;
 878   3                                                      }
 879   2                                      case STOP:                      //In this state, it checks if the RX bus was quite and also if it receives the start bit
 880   2                                                              {
 881   3                                                                      State = stopconditionbitverify();
 882   3                                                                      if (State==ERRORRESET) ErrorLog = STOP;
 883   3      
 884   3                                                                      if (State==STOP)        break;
 885   3                                                              }
 886   2                                      case END:                       //In this state, it Resets the state machine and Turn on the Data Ready Flag
 887   2                                                              {
 888   3                                                                      State = IDLE;
 889   3                                                                      ErrorLog = IDLE;
 890   3                                                                      StopnDisableDaliRxTimer();
 891   3                                                                      SetDaliInputPinPolarity(ACTIVE_LOW);
 892   3                                                                      EnableInt1();
 893   3                                                                      DaliFlags.flag.Dataready = 1;
 894   3                                                                      DaliFlags.flag.RXBusy=0;                //It Clears the Flag indicating the Dali Rx is not busy
 895   3                                                                      break;
 896   3                                                              }
 897   2      
 898   2                                      case ERRORRESET:                        //In this state, it Resets the state machine and Turn on the Data Ready Flag
 899   2                                                              {
 900   3                                                                      State = IDLE;
 901   3                                                                      StopnDisableDaliRxTimer();
 902   3                                                                      SetDaliInputPinPolarity(ACTIVE_LOW);
 903   3                                                                      EnableInt1();
 904   3      
 905   3                                                                      DaliFlags.flag.Error = 1;
 906   3                                                                      break;
 907   3                                                              }
 908   2      
 909   2                                      default: State=IDLE;
 910   2      
 911   2      
 912   2      
 913   2                              }
 914   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
C51 COMPILER V9.53.0.0   DALI                                                              05/04/2016 14:55:59 PAGE 16  

   CODE SIZE        =   1545    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     10    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      5       8
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      4    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

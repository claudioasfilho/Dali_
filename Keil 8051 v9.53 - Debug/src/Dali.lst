C51 COMPILER V9.53.0.0   DALI                                                              05/04/2016 17:25:46 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE DALI
OBJECT MODULE PLACED IN .\src\Dali.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v3_3\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\clfil
                    -ho\Dropbox (Silicon Labs)\Code_Workspace_Dali\Dali_\src\Dali.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) 
                    -FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:/SiliconLabs/SimplicityStudio/v3_3
                    -/developer/sdks/si8051/v3//Device/shared/si8051Base;C:/SiliconLabs/SimplicityStudio/v3_3/developer/sdks/si8051/v3//Devic
                    -e/EFM8UB1;C:/SiliconLabs/SimplicityStudio/v3_3/developer/sdks/si8051/v3//Device/EFM8UB1/inc;C:\SiliconLabs\SimplicityStu
                    -dio\v3_4a\developer\sdks\si8051\v3\Device\EFM8UB1\inc) PRINT(.\src\Dali.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.
                    -\src\Dali.OBJ)

line level    source

   1          //-----------------------------------------------------------------------------
   2          // Dali.c
   3          //-----------------------------------------------------------------------------
   4          // Copyright 2014 Silicon Laboratories, Inc.
   5          // http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   6          //
   7          // Program Description:
   8          //
   9          // This program uses Timer0 in 8-bit counter/timer with reload mode.
  10          // It uses the Timer0 to create an interrupt at a certain rate and toggles
  11          // the LED when the interrupt counter reaches the selected value. 
  12          //
  13          // Resources:
  14          //   SYSCLK - 24.5 MHz HFOSC0 / 8
  15          //   Timer0 - 10 Hz interrupt
  16          //   P1.4   - LED green
  17          //   P2.3   - Display enable
  18          //
  19          //-----------------------------------------------------------------------------
  20          // How To Test: EFM8UB1 STK
  21          //-----------------------------------------------------------------------------
  22          // 1) Place the switch in "AEM" mode.
  23          // 2) Connect the EFM8UB1 STK board to a PC using a mini USB cable.
  24          // 3) Compile and download code to the EFM8UB1 STK board.
  25          //    In Simplicity Studio IDE, select Run -> Debug from the menu bar,
  26          //    click the Debug button in the quick menu, or press F11.
  27          // 4) Run the code.
  28          //    In Simplicity Studio IDE, select Run -> Resume from the menu bar,
  29          //    click the Resume button in the quick menu, or press F8.
  30          // 5) Check that the green LED is blinking.
  31          //
  32          // Target:         EFM8UB1
  33          // Tool chain:     Generic
  34          //
  35          // Release 0.1 (ST)
  36          //    - Initial Revision
  37          //    - 10 OCT 2014
  38          //
  39          
  40          //-----------------------------------------------------------------------------
  41          // Includes
  42          //-----------------------------------------------------------------------------
  43          #include <SI_EFM8UB1_Register_Enums.h>
  44          #include "InitDevice.h"
  45          #include "Dali.h"
*** ERROR C141 IN LINE 91 OF C:\Users\clfilho\Dropbox (Silicon Labs)\Code_Workspace_Dali\Dali_\src\DaliCommands.h: synta
             -x error near ';'
*** ERROR C141 IN LINE 93 OF C:\Users\clfilho\Dropbox (Silicon Labs)\Code_Workspace_Dali\Dali_\src\DaliCommands.h: synta
             -x error near '}'
  46          
C51 COMPILER V9.53.0.0   DALI                                                              05/04/2016 17:25:46 PAGE 2   

  47          
  48          
  49          
  50          //bit MDone;
  51          //bit MOutput;
  52          //bit DaliStopFlag;
  53          //bit DaliErrorFlag;
  54          
  55          static xdata DALIFLAGS DaliFlags;
  56          static xdata DALIRXREGISTERS DaliRXReg;
  57          
  58          /*********************************************************************************
  59           *********************************************************************************
  60                                                   Manchester Encoder Related Functions
  61           *********************************************************************************
  62           *********************************************************************************/
  63          
  64          
  65          /*Manchester Decoder Busy Flag Getters and Setters*/
  66          
  67          void SetBusyFlag()
  68          {
  69   1              DaliFlags.flag.Busy = 1;
  70   1      }
  71          
  72          void ClearBusyFlag()
  73          {
  74   1              DaliFlags.flag.Busy = 0;
  75   1      }
  76          
  77          bit GetBusyFlag()
  78          {
  79   1       return DaliFlags.flag.Busy;
  80   1      }
  81          
  82          /*Manchester Decoder Output Flag Getters and Setters*/
  83          
  84          void SetMDOutput()                      //This function is processed by the ManchesterTXHandler and sets the DALI Output to L
             -ogic 1
  85          {                                                       //It is not setting the pin, but the logical state
  86   1              DaliFlags.flag.Output =1;
  87   1      }
  88          
  89          void ClearMDOutput()            //This function is processed by the ManchesterTXHandler and sets the DALI Output to 
             -Logic 0
  90          {
  91   1              DaliFlags.flag.Output =0;
  92   1      }
  93          
  94          bit GetMDOutput()
  95          {
  96   1       return DaliFlags.flag.Output;
  97   1      }
  98          
  99          
 100          void ManchesterEncoder (uint8_t input)
 101          {
 102   1              static BITS_BYTE Input;
 103   1      
 104   1              static int8_t counter = 8;                              //It uses 8 steps because it sends 7 bits and stills needs the time to conc
             -lude the last bit before it loads the counter again
 105   1      
 106   1              ClearBusyFlag();
C51 COMPILER V9.53.0.0   DALI                                                              05/04/2016 17:25:46 PAGE 3   

 107   1      
 108   1              if (counter==8)
 109   1              {
 110   2                      Input.Abyte = input;
 111   2              }
 112   1      
 113   1              while (counter>=0)
 114   1              {
 115   2                      while(GetBusyFlag()==1);
 116   2      
 117   2                      if (GetBusyFlag()==0)
 118   2                      {
 119   3                              switch (counter--){
 120   4      
 121   4                                                              case 0: //SetBusyFlag();
 122   4                                                              break;
 123   4                                                              case 1: DaliFlags.flag.Output = Input.nybble.BB0;
 124   4                                                              SetBusyFlag();
 125   4                                                              break;
 126   4                                                              case 2: DaliFlags.flag.Output = Input.nybble.BB1;
 127   4                                                              SetBusyFlag();
 128   4                                                              break;
 129   4                                                              case 3: DaliFlags.flag.Output = Input.nybble.BB2;
 130   4                                                              SetBusyFlag();
 131   4                                                              break;
 132   4                                                              case 4: DaliFlags.flag.Output = Input.nybble.BB3;
 133   4                                                              SetBusyFlag();
 134   4                                                              break;
 135   4                                                              case 5: DaliFlags.flag.Output = Input.nybble.BB4;
 136   4                                                              SetBusyFlag();
 137   4                                                              break;
 138   4                                                              case 6: DaliFlags.flag.Output = Input.nybble.BB5;
 139   4                                                              SetBusyFlag();
 140   4                                                              break;
 141   4                                                              case 7: DaliFlags.flag.Output = Input.nybble.BB6;
 142   4                                                              SetBusyFlag();
 143   4                                                              break;
 144   4                                                              case 8: DaliFlags.flag.Output = Input.nybble.BB7;
 145   4                                                              SetBusyFlag();
 146   4                                                              break;
 147   4                                      }
 148   3      
 149   3      
 150   3                      }
 151   2      
 152   2              }
 153   1      
 154   1              counter=8;
 155   1      
 156   1      }
 157          
 158          /*This is the function that implements the decoding it self. It is fed with the Busyflag and it sets and c
             -lears the I/O depending
 159           * on state of the Logic bit to be transmitted
 160           * This function has to be called from a timer with a period of 416.5us, which represents half of the Manc
             -hester bit size.
 161           * The Dali Period = 833us, so it is 833/2 = 433.5us */
 162          void ManchesterTXHandler()
 163          {
 164   1              static uint8_t counter = 0;
 165   1              static uint8_t evcounter = 0;
 166   1      
 167   1              if (GetBusyFlag())
C51 COMPILER V9.53.0.0   DALI                                                              05/04/2016 17:25:46 PAGE 4   

 168   1              {
 169   2                      if (evcounter++==15)
 170   2                              {evcounter=0;}
 171   2                      if (GetDaliStopFlag()==0)               //Are these the Stop Bits?
 172   2                      {
 173   3      
 174   3                              //The next lines implement the two steps of the Manchester Decoding
 175   3                              if (counter==0)                                 //Process First Part of the Byte
 176   3                              {
 177   4                                      if (GetMDOutput()==0) SetDaliOutputPin();
 178   4                                      else ClearDaliOutputPin();
 179   4                                      counter++;
 180   4                              }
 181   3                              else
 182   3                              {                                                               //Process 2nd Part of the Byte
 183   4      
 184   4                                      if (GetMDOutput()==0) ClearDaliOutputPin();
 185   4                                      else SetDaliOutputPin();
 186   4                                      counter=0;
 187   4      
 188   4                                      ClearBusyFlag();                //Finished Processing Byte for Manchester Encoder
 189   4                              }
 190   3      
 191   3                      }
 192   2                      else                            //Yes, This is the Stop bits stage
 193   2                              {
 194   3                                      if (counter++<4)        SetDaliOutputPin();             //It keeps the Output High for 4 Cycles of the Timer
 195   3                                      else{
 196   4                                                      SetDaliOutputPin();             //The Line is normally High;
 197   4                                                      counter=0;
 198   4                                                      ClearDaliStopFlag();
 199   4                                                      ClearBusyFlag();                //Finished Processing Byte for Manchester Encoder
 200   4                                              }
 201   3                              }
 202   2                      }
 203   1      
 204   1      }
 205          
 206          
 207          
 208          /*********************************************************************************
 209           *********************************************************************************
 210                                                   Dali TX Related Functions
 211           *********************************************************************************
 212           *********************************************************************************/
 213          
 214          void ReloadDaliTxTimer(uint8_t reloadH, uint8_t reloadL)
 215          {
 216   1              TH0 = reloadH;
 217   1              TL0 = reloadL;
 218   1      }
 219          
 220          
 221          void StartDaliTxTimer()
 222          {
 223   1      
 224   1              TCON |= TCON_TR0__RUN;          //Enables Timer 1 Run
 225   1      }
 226          
 227          
 228          uint16_t GetDaliTxTimer()
 229          {
 230   1              return TH0|TL0;
C51 COMPILER V9.53.0.0   DALI                                                              05/04/2016 17:25:46 PAGE 5   

 231   1      }
 232          
 233          
 234          void StopDaliTxTimer()
 235          {
 236   1      
 237   1              TH1 = 0;
 238   1              TL1 = 0;
 239   1              TCON |= TCON_TR0__STOP;         //Enables Timer 1 Run
 240   1      }
 241          
 242          
 243          void DaliFrameStart()
 244          {
 245   1              ClearBusyFlag();                                //Clear Flag that indicates the Manchester Decoder is Busy on the Interrupt
 246   1              SetMDOutput();
 247   1              SetBusyFlag();                                  //Sets the Busy Flag so the Bit can be processed
 248   1              while(GetBusyFlag()==1);                //Waits until the Bit gets transmitted
 249   1      
 250   1      }
 251          
 252          void DaliFrameStop()
 253          {
 254   1              ClearBusyFlag();                //Clear Flag that indicates the Manchester Decoder is Busy on the Interrupt
 255   1              SetDaliStopFlag();
 256   1              SetBusyFlag();                  //Sets the Busy Flag so the Bit can be processed
 257   1              while(GetBusyFlag()==1);                //Waits until the Bit gets transmitted
 258   1      
 259   1      }
 260          
 261          void DaliTXFrame(uint8_t address, uint8_t Ddata)
 262          {
 263   1              DALI_FRAME States;
 264   1      
 265   1              SetDaliOutputPin();                     //The Line is Normally High
 266   1              States = START;
 267   1      
 268   1              while (States<END)
 269   1              {
 270   2                      switch (States)
 271   2                      {
 272   3                              case START: {
 273   4                                                              DaliFrameStart();
 274   4                                                              States= ADDRESS;
 275   4                                                              break;
 276   4                                                      }
 277   3      
 278   3                              case ADDRESS: {
 279   4                                                              ManchesterEncoder(address);
 280   4                                                              States= DATA;
 281   4                                                              break;
 282   4                                                      }
 283   3      
 284   3                              case DATA: {
 285   4                                                              ManchesterEncoder(Ddata);
 286   4                                                              States= STOP;
 287   4                                                              break;
 288   4                                                      }
 289   3      
 290   3                              case STOP: {
 291   4                                                              DaliFrameStop();
 292   4                                                              States= END;
 293   4                                                              break;
C51 COMPILER V9.53.0.0   DALI                                                              05/04/2016 17:25:46 PAGE 6   

 294   4                                                      }
 295   3      
 296   3                      }
 297   2              }
 298   1      
 299   1      }
 300          
 301          void DaliAnswerFrame(uint8_t Ddata)
 302          {
 303   1              DALI_FRAME States;
 304   1      
 305   1              SetDaliOutputPin();                     //The Line is Normally High
 306   1              States = START;
 307   1      
 308   1              while (States<END)
 309   1              {
 310   2                      switch (States)
 311   2                      {
 312   3                              case START: {
 313   4                                                              DaliFrameStart();
 314   4                                                              States= DATA;
 315   4                                                              break;
 316   4                                                      }
 317   3      
 318   3                              case DATA: {
 319   4                                                              ManchesterEncoder(Ddata);
 320   4                                                              States= STOP;
 321   4                                                              break;
 322   4                                                      }
 323   3      
 324   3                              case STOP: {
 325   4                                                              DaliFrameStop();
 326   4                                                              States= END;
 327   4                                                              break;
 328   4                                                      }
 329   3      
 330   3                      }
 331   2              }
 332   1      
 333   1      }
 334          /*Dali Stop bit Flag Getters and Setters*/
 335          
 336          
 337          /*Dali Stop bit Flag Getters and Setters*/
 338          
 339          void SetDaliStopFlag()
 340          {
 341   1              DaliFlags.flag.Stop =1;
 342   1      }
 343          
 344          void ClearDaliStopFlag()
 345          {
 346   1              DaliFlags.flag.Stop =0;
 347   1      }
 348          
 349          bit GetDaliStopFlag()
 350          {
 351   1       return DaliFlags.flag.Stop;
 352   1      }
 353          
 354          void ClearDaliFlags()
 355          {
 356   1              DaliFlags.DRegister=0;
C51 COMPILER V9.53.0.0   DALI                                                              05/04/2016 17:25:46 PAGE 7   

 357   1      }
 358          
 359          void SetDaliOutputPin()
 360          {
 361   1              DALI_OUT=1;
 362   1      }
 363          
 364          void ClearDaliOutputPin()
 365          {
 366   1              DALI_OUT=0;
 367   1      }
 368          
 369          bit GetDaliOutputPin()
 370          {
 371   1       return DALI_OUT;
 372   1      }
 373          
 374          
 375          /*********************************************************************************
 376           *********************************************************************************
 377                                                   Dali RX Related Functions
 378           *********************************************************************************
 379           *********************************************************************************/
 380          uint8_t BusQuietCounter;
 381          
 382          bit _1stQ;
 383          bit _2ndQ;
 384          bit _3rdQ;
 385          bit _4thQ;
 386          
 387          static xdata DALI_FRAME ErrorLog = IDLE;
 388          
 389          
 390          DALI_FRAME startconditionbitDemodulation()
 391          {
 392   1              static xdata DALI_DEMOD bitState = _1qB;
 393   1      
 394   1      
 395   1              switch (bitState)
 396   1              {
 397   2                      case _1qB: //This is Triggered by the INT1_ISR
 398   2                      {
 399   3                              _1stQ = GetDaliIntputPin();
 400   3                              if((GetDaliIntputPin()==DALI_LOGIC_0))
 401   3                              {
 402   4      
 403   4                                      ReloadnStartDaliRxTimer(STMH, STML);
 404   4                                      bitState = _2qB;
 405   4                              }
 406   3                              else
 407   3                              {
 408   4                                      //Something is wrong with the Data, it Returns an Error
 409   4                                      bitState = _1qB;
 410   4                                      return ERRORRESET;
 411   4                              }
 412   3                              break;
 413   3                      }
 414   2      
 415   2                      case _2qB: //This is Triggered by the TIMER1_ISR
 416   2                      {
 417   3                              _2ndQ = GetDaliIntputPin();
 418   3                              if((GetDaliIntputPin()==DALI_LOGIC_0))
 419   3                              {
C51 COMPILER V9.53.0.0   DALI                                                              05/04/2016 17:25:46 PAGE 8   

 420   4      
 421   4                                      StopnDisableDaliRxTimer();
 422   4                                      SetDaliInputPinPolarity(ACTIVE_HIGH);
 423   4                                      EnableInt1();
 424   4                                      bitState = _3qB;
 425   4      
 426   4                              }
 427   3                              else
 428   3                              {
 429   4                                      //Something is wrong with the Data, it Returns an Error
 430   4                                      bitState = _1qB;
 431   4                                      return ERRORRESET;
 432   4                              }
 433   3                              break;
 434   3                      }
 435   2      
 436   2                      case _3qB: //This is Triggered by the TIMER1_ISR
 437   2                      {
 438   3                              _3rdQ = GetDaliIntputPin();
 439   3                              if((GetDaliIntputPin()==DALI_LOGIC_1))
 440   3                              {
 441   4      
 442   4      
 443   4                                      ReloadnStartDaliRxTimer(STMH, STML);
 444   4                                      bitState = _4qB;
 445   4      
 446   4      
 447   4                              }
 448   3                              else
 449   3                              {
 450   4                                      //Something is wrong with the Data, it Returns an Error
 451   4                                      bitState = _1qB;
 452   4                                      return ERRORRESET;
 453   4                              }
 454   3                              break;
 455   3      
 456   3                      }
 457   2                      case _4qB: //This is Triggered by the TIMER1_ISR, once completed successfully it disables the INT1 and i
             -t uses the Timer to check the DALI_IN State
 458   2                      {
 459   3                              _4thQ = GetDaliIntputPin();
 460   3                              if((GetDaliIntputPin()==DALI_LOGIC_1))
 461   3                              {
 462   4      
 463   4                                      DisableInt1();
 464   4                                      ReloadnStartDaliRxTimer(STMH, STML);
 465   4                                      bitState = _1qB;
 466   4      
 467   4                                      return ADDRESS; //Processing is done. It resets this state machine and moves the main state machine to
             - the next state
 468   4                              }
 469   3                              else
 470   3                              {
 471   4                                      //Something is wrong with the Data, it resets the INT trigger and Disables Timer
 472   4                                      bitState = _1qB;
 473   4                                      return ERRORRESET;
 474   4                              }
 475   3                              break;
 476   3                      }
 477   2      
 478   2              }
 479   1      
 480   1              return START; //Still Processing the Bit
C51 COMPILER V9.53.0.0   DALI                                                              05/04/2016 17:25:46 PAGE 9   

 481   1      }
 482          
 483          DALI_FRAME stopconditionbitverify()
 484          {
 485   1              static xdata DALI_DEMOD bitState = _1qB;
 486   1      
 487   1      
 488   1              switch (bitState)
 489   1              {
 490   2                      case _1qB: //This is Triggered by the TIMER1_ISR
 491   2                      {
 492   3                              if((GetDaliIntputPin()==DALI_LOGIC_1))
 493   3                              {
 494   4      
 495   4                                      _1stQ = GetDaliIntputPin();
 496   4                                      ReloadDaliRxTimer(TMH, TML);
 497   4                                      bitState = _2qB;
 498   4                              }
 499   3                              else //If the bit is corrupted, the device goes to ERRORRESET MODE
 500   3                              {
 501   4                                      bitState = _1qB;
 502   4                                      return ERRORRESET;
 503   4                              }
 504   3                              break;
 505   3                      }
 506   2      
 507   2                      case _2qB: //This is Triggered by the TIMER1_ISR
 508   2                      {
 509   3                              if((GetDaliIntputPin()==DALI_LOGIC_1))
 510   3                              {
 511   4      
 512   4                                      _2ndQ = GetDaliIntputPin();
 513   4                                      ReloadDaliRxTimer(TMH, TML);
 514   4                                      bitState = _3qB;
 515   4                              }
 516   3                              else //If the bit is corrupted, the device goes to ERRORRESET MODE
 517   3                              {
 518   4                                      bitState = _1qB;
 519   4                                      return ERRORRESET;
 520   4                              }
 521   3                              break;
 522   3                      }
 523   2      
 524   2                      case _3qB: //This is Triggered by the TIMER1_ISR
 525   2                      {
 526   3                              if((GetDaliIntputPin()==DALI_LOGIC_1))
 527   3                              {
 528   4      
 529   4                                      _3rdQ = GetDaliIntputPin();
 530   4                                      ReloadDaliRxTimer(TMH, TML);
 531   4                                      bitState = _4qB;
 532   4      
 533   4                              }
 534   3                              else //If the bit is corrupted, the device goes to ERRORRESET MODE
 535   3                              {
 536   4                                      bitState = _1qB;
 537   4                                      return ERRORRESET;
 538   4                              }
 539   3                              break;
 540   3      
 541   3                      }
 542   2                      case _4qB: //This is Triggered by the TIMER1_ISR, once completed successfully it disables the INT1 and i
             -t uses the Timer to check the DALI_IN State
C51 COMPILER V9.53.0.0   DALI                                                              05/04/2016 17:25:46 PAGE 10  

 543   2                      {
 544   3                              if((GetDaliIntputPin()==DALI_LOGIC_1))
 545   3                              {
 546   4      
 547   4                                      _4thQ = GetDaliIntputPin();
 548   4                                      bitState = _1qB;
 549   4                                      return END; //Processing is done. It resets this state machine and moves the main state machine to the
             - next state
 550   4                              }
 551   3                              else //If the bit is corrupted, the device goes to ERRORRESET MODE
 552   3                                      {
 553   4                                              bitState = _1qB;
 554   4                                              return ERRORRESET;
 555   4                                      }
 556   3                              break;
 557   3                      }
 558   2      
 559   2              }
 560   1      
 561   1              return STOP; //Still Processing the Bit
 562   1      }
 563          
 564          
 565          bit bitDemodulation()
 566          {
 567   1              static xdata DALI_DEMOD bitState = _1qB;
 568   1      
 569   1              switch (bitState)
 570   1                      {
 571   2                              case _1qB: //This is Triggered by the TIMER1_ISR
 572   2                              {
 573   3      
 574   3                                      _1stQ = GetDaliIntputPin();
 575   3                                      ReloadnStartDaliRxTimer(STMH, STML);
 576   3                                      bitState = _2qB;
 577   3                                      //ToogleTestLed1();
 578   3                                      break;
 579   3                              }
 580   2      
 581   2                              case _2qB: //This is Triggered by the TIMER1_ISR
 582   2                              {
 583   3                                      _2ndQ = GetDaliIntputPin();
 584   3                                      ReloadnStartDaliRxTimer(STMH, STML);
 585   3                                      bitState = _3qB;
 586   3                                      //ToogleTestLed2();
 587   3                                      break;
 588   3                              }
 589   2      
 590   2                              case _3qB: //This is Triggered by the TIMER1_ISR
 591   2                              {
 592   3      
 593   3                                      _3rdQ = GetDaliIntputPin();
 594   3                                      ReloadnStartDaliRxTimer(STMH, STML);
 595   3                                      bitState = _4qB;
 596   3                                      //ToogleTestLed3();
 597   3                                      break;
 598   3      
 599   3                              }
 600   2                              case _4qB: //This is Triggered by the TIMER1_ISR
 601   2                              {
 602   3      
 603   3                                      _4thQ = GetDaliIntputPin();
 604   3                                      ReloadnStartDaliRxTimer(STMH, STML);
C51 COMPILER V9.53.0.0   DALI                                                              05/04/2016 17:25:46 PAGE 11  

 605   3                                      bitState = _1qB;
 606   3                                      //ToogleTestLed4();
 607   3                                      return 1; //Processing is done. It resets this state machine and informs user the bit information is a
             -vailable
 608   3                                      break;
 609   3                              }
 610   2                      }
 611   1              return 0;       //Still Processing the Bit
 612   1      
 613   1      }
 614          
 615          //This Function returns the Logic level of the Bit read by the bitDemodulation() function and it clears th
             -e "Quarter" bits. If the bit is invalid, it returns -1
 616          int isbitHighorLow()
 617          {
 618   1              int output=-1;
 619   1      
 620   1              if ((_1stQ==DALI_LOGIC_0) && (_2ndQ==DALI_LOGIC_0) && (_3rdQ==DALI_LOGIC_1) && (_4thQ==DALI_LOGIC_1)) out
             -put = 1;
 621   1              else if ((_1stQ==DALI_LOGIC_1) && (_2ndQ==DALI_LOGIC_1) && (_3rdQ==DALI_LOGIC_0) && (_4thQ==DALI_LOGIC_0)
             -) output = 0;
 622   1      
 623   1              //It Resets the "Global" bits (File Scope only) that are used to store the data read from the GPIO
 624   1              _1stQ=0;
 625   1              _2ndQ=0;
 626   1              _3rdQ=0;
 627   1              _4thQ=0;
 628   1      
 629   1              return output;
 630   1      }
 631          
 632          
 633          
 634          bit GetDaliIntputPin()
 635          {
 636   1       return DALI_IN;
 637   1      }
 638          
 639          void EnableDaliRxTimerInt()
 640          {
 641   1              IE |= IE_ET1__ENABLED;
 642   1      }
 643          
 644          void DisableDaliRxTimerInt()
 645          {
 646   1              IE &= 0xf7;
 647   1      }
 648          
 649          
 650          void ReloadDaliRxTimer(uint8_t reloadH, uint8_t reloadL)
 651          {
 652   1              TH1 = reloadH;
 653   1              TL1 = reloadL;
 654   1      }
 655          
 656          void ReloadnStartDaliRxTimer(uint8_t reloadH, uint8_t reloadL)
 657          {
 658   1              TH1 = reloadH;
 659   1              TL1 = reloadL;
 660   1              EnableDaliRxTimerInt();
 661   1              StartDaliRxTimer();
 662   1      }
 663          
C51 COMPILER V9.53.0.0   DALI                                                              05/04/2016 17:25:46 PAGE 12  

 664          void StopnDisableDaliRxTimer()
 665          {
 666   1      
 667   1              StopDaliRxTimer();
 668   1              DisableDaliRxTimerInt();
 669   1      }
 670          
 671          
 672          void StartDaliRxTimer()
 673          {
 674   1      
 675   1              TCON |= TCON_TR1__RUN;          //Enables Timer 1 Run
 676   1      }
 677          
 678          
 679          uint16_t GetDaliRxTimer()
 680          {
 681   1              return TH1|TL1;
 682   1      }
 683          
 684          
 685          void StopDaliRxTimer()
 686          {
 687   1      
 688   1              TH1 = 0;
 689   1              TL1 = 0;
 690   1              TCON |= TCON_TR1__STOP;         //Enables Timer 1 Run
 691   1      }
 692          
 693          void IsDaliBusQuiet()
 694          {
 695   1      
 696   1              if (GetDaliIntputPin()==1)
 697   1              {
 698   2      
 699   2                      if(GetBusQuietCounter()<=254) IncBusQuietCounter();
 700   2              }
 701   1              if (GetDaliIntputPin()==0)
 702   1              {
 703   2      
 704   2                      ClearBusQuietCounter();
 705   2              }
 706   1      }
 707          
 708          
 709          void IncBusQuietCounter()
 710          {
 711   1              BusQuietCounter++;
 712   1      }
 713          
 714          void ClearBusQuietCounter()
 715          {
 716   1              BusQuietCounter=0;
 717   1      }
 718          
 719          uint8_t GetBusQuietCounter()
 720          {
 721   1              return BusQuietCounter;
 722   1      }
 723          
 724          
 725          void SetDaliRxErrorFlag()
 726          {
C51 COMPILER V9.53.0.0   DALI                                                              05/04/2016 17:25:46 PAGE 13  

 727   1              DaliFlags.flag.Error = 1;
 728   1      }
 729          
 730          void ClearDaliRxErrorFlag()
 731          {
 732   1              DaliFlags.flag.Error = 0;
 733   1      }
 734          
 735          bit GetDaliRxErrorFlag()
 736          {
 737   1              return DaliFlags.flag.Error;
 738   1      }
 739          
 740          void SetDaliDataReadyFlag()
 741          {
 742   1              DaliFlags.flag.Dataready = 1;
 743   1      }
 744          
 745          void ClearDaliDataReadyFlag()
 746          {
 747   1              DaliFlags.flag.Dataready = 0;
 748   1      }
 749          
 750          bit GetDaliDataReadyFlag()
 751          {
 752   1              return DaliFlags.flag.Dataready;
 753   1      }
 754          
 755          void SetDaliInputPinPolarity (INTPOLARITY input)
 756          {
 757   1              if (input==ACTIVE_HIGH) IT01CF |= 0x80;
 758   1              else IT01CF &=0x7f;
 759   1      }
 760          
 761          
 762          void EnableInt1 ()
 763          {
 764   1              TCON &= 0xF7; //Clearing the interrupt
 765   1              IE |= 0x4;
 766   1      }
 767          
 768          void DisableInt1 ()
 769          {
 770   1              IE &= 0xfb;
 771   1      }
 772          
 773          DALIRXREGISTERS GetDaliRXData()
 774          {
 775   1              return DaliRXReg;
 776   1      }
 777          
 778          void ClearDaliRXData()
 779          {
 780   1              DaliRXReg.Address=0;
 781   1              DaliRXReg.Data=0;
 782   1      }
 783          
 784          void DaliRXDecoding(int EntryMethod, DALIMODE mode)
 785          {
 786   1              static xdata DALI_FRAME State = IDLE;
 787   1              int Entry;
 788   1      
 789   1              static xdata BITS_BYTE DaliData;                //Variable used to temporarily store the bits being read from the Dali 
C51 COMPILER V9.53.0.0   DALI                                                              05/04/2016 17:25:46 PAGE 14  

             -Command
 790   1              static xdata uint8_t bitscounter=7;             //Keeps the position of the current bit being read
 791   1              int bitread=0;                                                  //Used to store the current bit being read. if the value is -1, it means the data wa
             -s invalid
 792   1      
 793   1              Entry=EntryMethod;
 794   1      
 795   1              switch (State)
 796   1      
 797   1                              {
 798   2      
 799   2                                      case IDLE:                      //In this state, it checks if the RX bus was quite and also if it receives the start bit
 800   2                                                              {
 801   3                                                                      if (GetBusQuietCounter()>1) State = START;
 802   3                                                                      DaliData.Abyte=0;
 803   3                                                                      DaliFlags.DRegister=0;          //It resets all the Flags
 804   3                                                                      DaliFlags.flag.RXBusy=1;                //It sets the Flag indicating the Dali Rx is busy
 805   3      
 806   3                                                                      //This Jumps straight to the next State on the State Machine so we don't loose a cycle, it purp
             -osely doesn't have a break
 807   3                                                              }
 808   2      
 809   2                                      case START:                     //In this state, it checks if the RX bus was quite and also if it receives the start bit
 810   2                                                              {
 811   3                                                                      State = startconditionbitDemodulation();
 812   3                                                                      if (State==ERRORRESET) ErrorLog = START;
 813   3                                                                      break;
 814   3                                                              }
 815   2      
 816   2                                      case ADDRESS:                   //In this state, it gets the Data coming from the Dali Packet and load it to the Ad
             -dress Register and to the Data Register
 817   2                                      case DATA:
 818   2                                                      {
 819   3      
 820   3                                                              if (bitDemodulation())  //Is Demodulation done for the bit?
 821   3                                                                      {
 822   4                                                                              bitread = isbitHighorLow();
 823   4      
 824   4                                                                              if (bitread!=-1)
 825   4                                                                              {
 826   5                                                                                      switch (bitscounter)
 827   5                                                                                      {
 828   6                                                                                              case 0: DaliData.nybble.BB0 = bitread;
 829   6                                                                                                              break;
 830   6      
 831   6                                                                                              case 1: DaliData.nybble.BB1 = bitread;
 832   6                                                                                                              break;
 833   6      
 834   6                                                                                              case 2: DaliData.nybble.BB2 = bitread;
 835   6                                                                                                              break;
 836   6      
 837   6                                                                                              case 3: DaliData.nybble.BB3 = bitread;
 838   6                                                                                                              break;
 839   6      
 840   6                                                                                              case 4: DaliData.nybble.BB4 = bitread;
 841   6                                                                                                              break;
 842   6      
 843   6                                                                                              case 5: DaliData.nybble.BB5 = bitread;
 844   6                                                                                                              break;
 845   6      
 846   6                                                                                              case 6: DaliData.nybble.BB6 = bitread;
 847   6                                                                                                              break;
 848   6      
C51 COMPILER V9.53.0.0   DALI                                                              05/04/2016 17:25:46 PAGE 15  

 849   6                                                                                              case 7: DaliData.nybble.BB7 = bitread;
 850   6                                                                                                              break;
 851   6                                                                                      }
 852   5                                                                                      if(bitscounter--==0)
 853   5                                                                                      {
 854   6      
 855   6                                                                                              bitscounter=7;
 856   6                                                                                              if (State==ADDRESS)     //Reading Address
 857   6                                                                                              {
 858   7                                                                                                      DaliRXReg.Address= DaliData.Abyte;
 859   7      
 860   7                                                                                                      if (mode==SLAVE_MODE)   State=DATA;
 861   7                                                                                                      else State=STOP;
 862   7                                                                                              }
 863   6                                                                                              else                            //Reading Data
 864   6                                                                                              {
 865   7                                                                                                      DaliRXReg.Data= DaliData.Abyte;
 866   7                                                                                                      State= STOP;
 867   7                                                                                                      ReloadnStartDaliRxTimer(TMH,TML); //Reloads the Timer for the STOP bit condition
 868   7      
 869   7                                                                                              }
 870   6      
 871   6                                                                                      }
 872   5      
 873   5                                                                              }
 874   4      
 875   4                                                                              else //If any of the bits is corrupted, the device goes to ERRORRESET MODE
 876   4                                                                              {
 877   5                                                                                      ErrorLog = State;
 878   5                                                                                      State = ERRORRESET;
 879   5      
 880   5                                                                              }
 881   4                                                              }
 882   3                                                              break;
 883   3                                                      }
 884   2                                      case STOP:                      //In this state, it checks if the RX bus was quite and also if it receives the start bit
 885   2                                                              {
 886   3                                                                      State = stopconditionbitverify();
 887   3                                                                      if (State==ERRORRESET) ErrorLog = STOP;
 888   3      
 889   3                                                                      if (State==STOP)        break;
 890   3                                                              }
 891   2                                      case END:                       //In this state, it Resets the state machine and Turn on the Data Ready Flag
 892   2                                                              {
 893   3                                                                      State = IDLE;
 894   3                                                                      ErrorLog = IDLE;
 895   3                                                                      StopnDisableDaliRxTimer();
 896   3                                                                      SetDaliInputPinPolarity(ACTIVE_LOW);
 897   3                                                                      EnableInt1();
 898   3                                                                      DaliFlags.flag.Dataready = 1;
 899   3                                                                      DaliFlags.flag.RXBusy=0;                //It Clears the Flag indicating the Dali Rx is not busy
 900   3                                                                      break;
 901   3                                                              }
 902   2      
 903   2                                      case ERRORRESET:                        //In this state, it Resets the state machine and Turn on the Data Ready Flag
 904   2                                                              {
 905   3                                                                      State = IDLE;
 906   3                                                                      StopnDisableDaliRxTimer();
 907   3                                                                      SetDaliInputPinPolarity(ACTIVE_LOW);
 908   3                                                                      EnableInt1();
 909   3      
 910   3                                                                      DaliFlags.flag.Error = 1;
 911   3                                                                      break;
C51 COMPILER V9.53.0.0   DALI                                                              05/04/2016 17:25:46 PAGE 16  

 912   3                                                              }
 913   2      
 914   2                                      default: State=IDLE;
 915   2      
 916   2      
 917   2      
 918   2                              }
 919   1      }

C51 COMPILATION COMPLETE.  0 WARNING(S),  2 ERROR(S)

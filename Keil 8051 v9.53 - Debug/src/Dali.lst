C51 COMPILER V9.53.0.0   DALI                                                              05/03/2016 11:55:38 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE DALI
OBJECT MODULE PLACED IN .\src\Dali.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v3_3\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\clfil
                    -ho\Dropbox (Silicon Labs)\Code_Workspace_Dali\Dali_\src\Dali.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) 
                    -FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:/SiliconLabs/SimplicityStudio/v3_3
                    -/developer/sdks/si8051/v3//Device/shared/si8051Base;C:/SiliconLabs/SimplicityStudio/v3_3/developer/sdks/si8051/v3//Devic
                    -e/EFM8UB1;C:/SiliconLabs/SimplicityStudio/v3_3/developer/sdks/si8051/v3//Device/EFM8UB1/inc;C:\SiliconLabs\SimplicityStu
                    -dio\v3_4a\developer\sdks\si8051\v3\Device\EFM8UB1\inc) PRINT(.\src\Dali.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.
                    -\src\Dali.OBJ)

line level    source

   1          //-----------------------------------------------------------------------------
   2          // Dali.c
   3          //-----------------------------------------------------------------------------
   4          // Copyright 2014 Silicon Laboratories, Inc.
   5          // http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   6          //
   7          // Program Description:
   8          //
   9          // This program uses Timer0 in 8-bit counter/timer with reload mode.
  10          // It uses the Timer0 to create an interrupt at a certain rate and toggles
  11          // the LED when the interrupt counter reaches the selected value. 
  12          //
  13          // Resources:
  14          //   SYSCLK - 24.5 MHz HFOSC0 / 8
  15          //   Timer0 - 10 Hz interrupt
  16          //   P1.4   - LED green
  17          //   P2.3   - Display enable
  18          //
  19          //-----------------------------------------------------------------------------
  20          // How To Test: EFM8UB1 STK
  21          //-----------------------------------------------------------------------------
  22          // 1) Place the switch in "AEM" mode.
  23          // 2) Connect the EFM8UB1 STK board to a PC using a mini USB cable.
  24          // 3) Compile and download code to the EFM8UB1 STK board.
  25          //    In Simplicity Studio IDE, select Run -> Debug from the menu bar,
  26          //    click the Debug button in the quick menu, or press F11.
  27          // 4) Run the code.
  28          //    In Simplicity Studio IDE, select Run -> Resume from the menu bar,
  29          //    click the Resume button in the quick menu, or press F8.
  30          // 5) Check that the green LED is blinking.
  31          //
  32          // Target:         EFM8UB1
  33          // Tool chain:     Generic
  34          //
  35          // Release 0.1 (ST)
  36          //    - Initial Revision
  37          //    - 10 OCT 2014
  38          //
  39          
  40          //-----------------------------------------------------------------------------
  41          // Includes
  42          //-----------------------------------------------------------------------------
  43          #include <SI_EFM8UB1_Register_Enums.h>
  44          #include "InitDevice.h"
  45          #include "Dali.h"
  46          
  47          
  48          
  49          
  50          //bit MDone;
C51 COMPILER V9.53.0.0   DALI                                                              05/03/2016 11:55:38 PAGE 2   

  51          //bit MOutput;
  52          //bit DaliStopFlag;
  53          //bit DaliErrorFlag;
  54          
  55          static xdata DALIFLAGS DaliFlags;
  56          static xdata DALIRXREGISTERS DaliRXReg;
  57          
  58          /*********************************************************************************
  59           *********************************************************************************
  60                                                   Manchester Encoder Related Functions
  61           *********************************************************************************
  62           *********************************************************************************/
  63          
  64          
  65          /*Manchester Decoder Busy Flag Getters and Setters*/
  66          
  67          void SetBusyFlag()
  68          {
  69   1              DaliFlags.flag.Busy = 1;
  70   1      }
  71          
  72          void ClearBusyFlag()
  73          {
  74   1              DaliFlags.flag.Busy = 0;
  75   1      }
  76          
  77          bit GetBusyFlag()
  78          {
  79   1       return DaliFlags.flag.Busy;
  80   1      }
  81          
  82          /*Manchester Decoder Output Flag Getters and Setters*/
  83          
  84          void SetMDOutput()
  85          {
  86   1              DaliFlags.flag.Output =1;
  87   1      }
  88          
  89          void ClearMDOutput()
  90          {
  91   1              DaliFlags.flag.Output =0;
  92   1      }
  93          
  94          bit GetMDOutput()
  95          {
  96   1       return DaliFlags.flag.Output;
  97   1      }
  98          
  99          
 100          void ManchesterEncoder (uint8_t input)
 101          {
 102   1              static BITS_BYTE Input;
 103   1      
 104   1              static int8_t counter = 8;                              //It uses 8 steps because it sends 7 bits and stills needs the time to conc
             -lude the last bit before it loads the counter again
 105   1      
 106   1              ClearBusyFlag();
 107   1      
 108   1              if (counter==8)
 109   1              {
 110   2                      Input.Abyte = input;
 111   2              }
 112   1      
C51 COMPILER V9.53.0.0   DALI                                                              05/03/2016 11:55:38 PAGE 3   

 113   1              while (counter>=0)
 114   1              {
 115   2                      while(GetBusyFlag()==1);
 116   2      
 117   2                      if (GetBusyFlag()==0)
 118   2                      {
 119   3                              switch (counter--){
 120   4      
 121   4                                                              case 0: //SetBusyFlag();
 122   4                                                              break;
 123   4                                                              case 1: DaliFlags.flag.Output = Input.nybble.BB0;
 124   4                                                              SetBusyFlag();
 125   4                                                              break;
 126   4                                                              case 2: DaliFlags.flag.Output = Input.nybble.BB1;
 127   4                                                              SetBusyFlag();
 128   4                                                              break;
 129   4                                                              case 3: DaliFlags.flag.Output = Input.nybble.BB2;
 130   4                                                              SetBusyFlag();
 131   4                                                              break;
 132   4                                                              case 4: DaliFlags.flag.Output = Input.nybble.BB3;
 133   4                                                              SetBusyFlag();
 134   4                                                              break;
 135   4                                                              case 5: DaliFlags.flag.Output = Input.nybble.BB4;
 136   4                                                              SetBusyFlag();
 137   4                                                              break;
 138   4                                                              case 6: DaliFlags.flag.Output = Input.nybble.BB5;
 139   4                                                              SetBusyFlag();
 140   4                                                              break;
 141   4                                                              case 7: DaliFlags.flag.Output = Input.nybble.BB6;
 142   4                                                              SetBusyFlag();
 143   4                                                              break;
 144   4                                                              case 8: DaliFlags.flag.Output = Input.nybble.BB7;
 145   4                                                              SetBusyFlag();
 146   4                                                              break;
 147   4                                      }
 148   3      
 149   3      
 150   3                      }
 151   2      
 152   2              }
 153   1      
 154   1              counter=8;
 155   1      
 156   1      }
 157          
 158          /*********************************************************************************
 159           *********************************************************************************
 160                                                   Dali TX Related Functions
 161           *********************************************************************************
 162           *********************************************************************************/
 163          
 164          void DaliTxHandler()
 165          {
 166   1              static uint8_t counter = 0;
 167   1              static uint8_t evcounter = 0;
 168   1      
 169   1              if (GetBusyFlag())
 170   1              {
 171   2                      if (evcounter++==15)
 172   2                              {evcounter=0;}
 173   2                      if (GetDaliStopFlag()==0)               //Are these the Stop Bits?
 174   2                      {
 175   3      
C51 COMPILER V9.53.0.0   DALI                                                              05/03/2016 11:55:38 PAGE 4   

 176   3                              //The next lines implement the two steps of the Manchester Decoding
 177   3                              if (counter==0)                                 //Process First Part of the Byte
 178   3                              {
 179   4                                      if (GetMDOutput()==0) SetDaliOutputPin();
 180   4                                      else ClearDaliOutputPin();
 181   4                                      counter++;
 182   4                              }
 183   3                              else
 184   3                              {                                                               //Process 2nd Part of the Byte
 185   4      
 186   4                                      if (GetMDOutput()==0) ClearDaliOutputPin();
 187   4                                      else SetDaliOutputPin();
 188   4                                      counter=0;
 189   4      
 190   4                                      ClearBusyFlag();                //Finished Processing Byte for Manchester Encoder
 191   4                              }
 192   3      
 193   3                      }
 194   2                      else                            //Yes, This is the Stop bits stage
 195   2                              {
 196   3                                      if (counter++<4)        SetDaliOutputPin();             //It keeps the Output High for 4 Cycles of the Timer
 197   3                                      else{
 198   4                                                      SetDaliOutputPin();             //The Line is normally High;
 199   4                                                      counter=0;
 200   4                                                      ClearDaliStopFlag();
 201   4                                                      ClearBusyFlag();                //Finished Processing Byte for Manchester Encoder
 202   4                                              }
 203   3                              }
 204   2                      }
 205   1      
 206   1      }
 207          
 208          
 209          void ReloadDaliTxTimer(uint8_t reloadH, uint8_t reloadL)
 210          {
 211   1              TH0 = reloadH;
 212   1              TL0 = reloadL;
 213   1      }
 214          
 215          
 216          void StartDaliTxTimer()
 217          {
 218   1      
 219   1              TCON |= TCON_TR0__RUN;          //Enables Timer 1 Run
 220   1      }
 221          
 222          
 223          uint16_t GetDaliTxTimer()
 224          {
 225   1              return TH0|TL0;
 226   1      }
 227          
 228          
 229          void StopDaliTxTimer()
 230          {
 231   1      
 232   1              TH1 = 0;
 233   1              TL1 = 0;
 234   1              TCON |= TCON_TR0__STOP;         //Enables Timer 1 Run
 235   1      }
 236          
 237          
 238          void DaliFrameStart()
C51 COMPILER V9.53.0.0   DALI                                                              05/03/2016 11:55:38 PAGE 5   

 239          {
 240   1              ClearBusyFlag();                                //Clear Flag that indicates the Manchester Decoder is Busy on the Interrupt
 241   1              SetMDOutput();
 242   1              SetBusyFlag();                                  //Sets the Busy Flag so the Bit can be processed
 243   1              while(GetBusyFlag()==1);                //Waits until the Bit gets transmitted
 244   1      
 245   1      }
 246          
 247          void DaliFrameStop()
 248          {
 249   1              ClearBusyFlag();                //Clear Flag that indicates the Manchester Decoder is Busy on the Interrupt
 250   1              SetDaliStopFlag();
 251   1              SetBusyFlag();                  //Sets the Busy Flag so the Bit can be processed
 252   1              while(GetBusyFlag()==1);                //Waits until the Bit gets transmitted
 253   1      
 254   1      }
 255          
 256          void DaliTXFrame(uint8_t address, uint8_t Ddata)
 257          {
 258   1              DALI_FRAME States;
 259   1      
 260   1              SetDaliOutputPin();                     //The Line is Normally High
 261   1              States = START;
 262   1      
 263   1              while (States<END)
 264   1              {
 265   2                      switch (States)
 266   2                      {
 267   3                              case START: {
 268   4                                                              DaliFrameStart();
 269   4                                                              States= ADDRESS;
 270   4                                                              break;
 271   4                                                      }
 272   3      
 273   3                              case ADDRESS: {
 274   4                                                              ManchesterEncoder(address);
 275   4                                                              States= DATA;
 276   4                                                              break;
 277   4                                                      }
 278   3      
 279   3                              case DATA: {
 280   4                                                              ManchesterEncoder(Ddata);
 281   4                                                              States= STOP;
 282   4                                                              break;
 283   4                                                      }
 284   3      
 285   3                              case STOP: {
 286   4                                                              DaliFrameStop();
 287   4                                                              States= END;
 288   4                                                              break;
 289   4                                                      }
 290   3      
 291   3                      }
 292   2              }
 293   1      
 294   1      }
 295          
 296          void DaliAnswerFrame(uint8_t Ddata)
 297          {
 298   1              DALI_FRAME States;
 299   1      
 300   1              SetDaliOutputPin();                     //The Line is Normally High
 301   1              States = START;
C51 COMPILER V9.53.0.0   DALI                                                              05/03/2016 11:55:38 PAGE 6   

 302   1      
 303   1              while (States<END)
 304   1              {
 305   2                      switch (States)
 306   2                      {
 307   3                              case START: {
 308   4                                                              DaliFrameStart();
 309   4                                                              States= DATA;
 310   4                                                              break;
 311   4                                                      }
 312   3      
 313   3                              case DATA: {
 314   4                                                              ManchesterEncoder(Ddata);
 315   4                                                              States= STOP;
 316   4                                                              break;
 317   4                                                      }
 318   3      
 319   3                              case STOP: {
 320   4                                                              DaliFrameStop();
 321   4                                                              States= END;
 322   4                                                              break;
 323   4                                                      }
 324   3      
 325   3                      }
 326   2              }
 327   1      
 328   1      }
 329          /*Dali Stop bit Flag Getters and Setters*/
 330          
 331          
 332          /*Dali Stop bit Flag Getters and Setters*/
 333          
 334          void SetDaliStopFlag()
 335          {
 336   1              DaliFlags.flag.Stop =1;
 337   1      }
 338          
 339          void ClearDaliStopFlag()
 340          {
 341   1              DaliFlags.flag.Stop =0;
 342   1      }
 343          
 344          bit GetDaliStopFlag()
 345          {
 346   1       return DaliFlags.flag.Stop;
 347   1      }
 348          
 349          
 350          void SetDaliOutputPin()
 351          {
 352   1              DALI_OUT=1;
 353   1      }
 354          
 355          void ClearDaliOutputPin()
 356          {
 357   1              DALI_OUT=0;
 358   1      }
 359          
 360          bit GetDaliOutputPin()
 361          {
 362   1       return DALI_OUT;
 363   1      }
 364          
C51 COMPILER V9.53.0.0   DALI                                                              05/03/2016 11:55:38 PAGE 7   

 365          
 366          /*********************************************************************************
 367           *********************************************************************************
 368                                                   Dali RX Related Functions
 369           *********************************************************************************
 370           *********************************************************************************/
 371          uint8_t BusQuietCounter;
 372          
 373          bit _1stQ;
 374          bit _2ndQ;
 375          bit _3rdQ;
 376          bit _4thQ;
 377          
 378          static xdata DALI_FRAME ErrorLog = IDLE;
 379          
 380          
 381          DALI_FRAME startconditionbitDemodulation()
 382          {
 383   1              static xdata DALI_DEMOD bitState = _1qB;
 384   1      
 385   1              static xdata uint8_t DebugCounter=0;
 386   1      
 387   1              if (DebugCounter==1)
 388   1              {
 389   2                      ToogleTestLed5();
 390   2                      _1stQ = GetDaliIntputPin();
 391   2              }
 392   1      
 393   1              switch (bitState)
 394   1              {
 395   2                      case _1qB: //This is Triggered by the INT1_ISR
 396   2                      {
 397   3                              _1stQ = GetDaliIntputPin();
 398   3                              if((GetDaliIntputPin()==DALI_LOGIC_0))
 399   3                              {
 400   4      
 401   4                                      ReloadnStartDaliRxTimer(STMH, STML);
 402   4                                      bitState = _2qB;
 403   4                                      //ToogleTestLed();
 404   4                              }
 405   3                              else
 406   3                              {
 407   4                                      //Something is wrong with the Data, it Returns an Error
 408   4                                      bitState = _1qB;
 409   4                                      return ERRORRESET;
 410   4                              }
 411   3                              break;
 412   3                      }
 413   2      
 414   2                      case _2qB: //This is Triggered by the TIMER1_ISR
 415   2                      {
 416   3                              _2ndQ = GetDaliIntputPin();
 417   3                              if((GetDaliIntputPin()==DALI_LOGIC_0))
 418   3                              {
 419   4      
 420   4                                      StopnDisableDaliRxTimer();
 421   4                                      SetDaliInputPinPolarity(ACTIVE_HIGH);
 422   4                                      EnableInt1();
 423   4                                      bitState = _3qB;
 424   4                                      //ToogleTestLed();
 425   4                              }
 426   3                              else
 427   3                              {
C51 COMPILER V9.53.0.0   DALI                                                              05/03/2016 11:55:38 PAGE 8   

 428   4                                      //Something is wrong with the Data, it Returns an Error
 429   4                                      bitState = _1qB;
 430   4                                      return ERRORRESET;
 431   4                              }
 432   3                              break;
 433   3                      }
 434   2      
 435   2                      case _3qB: //This is Triggered by the TIMER1_ISR
 436   2                      {
 437   3                              _3rdQ = GetDaliIntputPin();
 438   3                              if((GetDaliIntputPin()==DALI_LOGIC_1))
 439   3                              {
 440   4      
 441   4      
 442   4                                      ReloadnStartDaliRxTimer(STMH, STML);
 443   4                                      bitState = _4qB;
 444   4                                      //ToogleTestLed();
 445   4      
 446   4                              }
 447   3                              else
 448   3                              {
 449   4                                      //Something is wrong with the Data, it Returns an Error
 450   4                                      bitState = _1qB;
 451   4                                      return ERRORRESET;
 452   4                              }
 453   3                              break;
 454   3      
 455   3                      }
 456   2                      case _4qB: //This is Triggered by the TIMER1_ISR, once completed successfully it disables the INT1 and i
             -t uses the Timer to check the DALI_IN State
 457   2                      {
 458   3                              _4thQ = GetDaliIntputPin();
 459   3                              if((GetDaliIntputPin()==DALI_LOGIC_1))
 460   3                              {
 461   4      
 462   4                                      DebugCounter++;
 463   4      
 464   4                                      DisableInt1();
 465   4                                      ReloadnStartDaliRxTimer(STMH, STML);
 466   4                                      bitState = _1qB;
 467   4                                      //ToogleTestLed();
 468   4                                      return ADDRESS; //Processing is done. It resets this state machine and moves the main state machine to
             - the next state
 469   4                              }
 470   3                              else
 471   3                              {
 472   4                                      //Something is wrong with the Data, it resets the INT trigger and Disables Timer
 473   4                                      bitState = _1qB;
 474   4                                      return ERRORRESET;
 475   4                              }
 476   3                              break;
 477   3                      }
 478   2      
 479   2              }
 480   1      
 481   1              return START; //Still Processing the Bit
 482   1      }
 483          
 484          DALI_FRAME stopconditionbitverify()
 485          {
 486   1              static xdata DALI_DEMOD bitState = _1qB;
 487   1      
 488   1      
C51 COMPILER V9.53.0.0   DALI                                                              05/03/2016 11:55:38 PAGE 9   

 489   1              switch (bitState)
 490   1              {
 491   2                      case _1qB: //This is Triggered by the TIMER1_ISR
 492   2                      {
 493   3                              if((GetDaliIntputPin()==DALI_LOGIC_1))
 494   3                              {
 495   4      
 496   4                                      _1stQ = GetDaliIntputPin();
 497   4                                      ReloadDaliRxTimer(TMH, TML);
 498   4                                      bitState = _2qB;
 499   4                                      ToogleTestLed3();
 500   4                              }
 501   3                              else //If the bit is corrupted, the device goes to ERRORRESET MODE
 502   3                              {
 503   4                                      bitState = _1qB;
 504   4                                      return ERRORRESET;
 505   4                              }
 506   3                              break;
 507   3                      }
 508   2      
 509   2                      case _2qB: //This is Triggered by the TIMER1_ISR
 510   2                      {
 511   3                              if((GetDaliIntputPin()==DALI_LOGIC_1))
 512   3                              {
 513   4      
 514   4                                      _2ndQ = GetDaliIntputPin();
 515   4                                      ReloadDaliRxTimer(TMH, TML);
 516   4                                      bitState = _3qB;
 517   4                                      ToogleTestLed3();
 518   4                              }
 519   3                              else //If the bit is corrupted, the device goes to ERRORRESET MODE
 520   3                              {
 521   4                                      bitState = _1qB;
 522   4                                      return ERRORRESET;
 523   4                              }
 524   3                              break;
 525   3                      }
 526   2      
 527   2                      case _3qB: //This is Triggered by the TIMER1_ISR
 528   2                      {
 529   3                              if((GetDaliIntputPin()==DALI_LOGIC_1))
 530   3                              {
 531   4      
 532   4                                      _3rdQ = GetDaliIntputPin();
 533   4                                      ReloadDaliRxTimer(TMH, TML);
 534   4                                      bitState = _4qB;
 535   4                                      ToogleTestLed3();
 536   4      
 537   4                              }
 538   3                              else //If the bit is corrupted, the device goes to ERRORRESET MODE
 539   3                              {
 540   4                                      bitState = _1qB;
 541   4                                      return ERRORRESET;
 542   4                              }
 543   3                              break;
 544   3      
 545   3                      }
 546   2                      case _4qB: //This is Triggered by the TIMER1_ISR, once completed successfully it disables the INT1 and i
             -t uses the Timer to check the DALI_IN State
 547   2                      {
 548   3                              if((GetDaliIntputPin()==DALI_LOGIC_1))
 549   3                              {
 550   4      
C51 COMPILER V9.53.0.0   DALI                                                              05/03/2016 11:55:38 PAGE 10  

 551   4                                      _4thQ = GetDaliIntputPin();
 552   4                                      bitState = _1qB;
 553   4                                      ToogleTestLed3();
 554   4                                      return END; //Processing is done. It resets this state machine and moves the main state machine to the
             - next state
 555   4                              }
 556   3                              else //If the bit is corrupted, the device goes to ERRORRESET MODE
 557   3                                      {
 558   4                                              bitState = _1qB;
 559   4                                              return ERRORRESET;
 560   4                                      }
 561   3                              break;
 562   3                      }
 563   2      
 564   2              }
 565   1      
 566   1              return STOP; //Still Processing the Bit
 567   1      }
 568          
 569          
 570          bit bitDemodulation()
 571          {
 572   1              static xdata DALI_DEMOD bitState = _1qB;
 573   1      
 574   1              switch (bitState)
 575   1                      {
 576   2                              case _1qB: //This is Triggered by the TIMER1_ISR
 577   2                              {
 578   3      
 579   3                                      _1stQ = GetDaliIntputPin();
 580   3                                      ReloadnStartDaliRxTimer(STMH, STML);
 581   3                                      bitState = _2qB;
 582   3                                      //ToogleTestLed1();
 583   3                                      break;
 584   3                              }
 585   2      
 586   2                              case _2qB: //This is Triggered by the TIMER1_ISR
 587   2                              {
 588   3                                      _2ndQ = GetDaliIntputPin();
 589   3                                      ReloadnStartDaliRxTimer(STMH, STML);
 590   3                                      bitState = _3qB;
 591   3                                      //ToogleTestLed2();
 592   3                                      break;
 593   3                              }
 594   2      
 595   2                              case _3qB: //This is Triggered by the TIMER1_ISR
 596   2                              {
 597   3      
 598   3                                      _3rdQ = GetDaliIntputPin();
 599   3                                      ReloadnStartDaliRxTimer(STMH, STML);
 600   3                                      bitState = _4qB;
 601   3                                      //ToogleTestLed3();
 602   3                                      break;
 603   3      
 604   3                              }
 605   2                              case _4qB: //This is Triggered by the TIMER1_ISR
 606   2                              {
 607   3      
 608   3                                      _4thQ = GetDaliIntputPin();
 609   3                                      ReloadnStartDaliRxTimer(STMH, STML);
 610   3                                      bitState = _1qB;
 611   3                                      //ToogleTestLed4();
 612   3                                      return 1; //Processing is done. It resets this state machine and informs user the bit information is a
C51 COMPILER V9.53.0.0   DALI                                                              05/03/2016 11:55:38 PAGE 11  

             -vailable
 613   3                                      break;
 614   3                              }
 615   2                      }
 616   1              return 0;       //Still Processing the Bit
 617   1      
 618   1      }
 619          
 620          //This Function returns the Logic level of the Bit read by the bitDemodulation() function and it clears th
             -e "Quarter" bits. If the bit is invalid, it returns -1
 621          int isbitHighorLow()
 622          {
 623   1              int output=-1;
 624   1      
 625   1              if ((_1stQ==DALI_LOGIC_0) && (_2ndQ==DALI_LOGIC_0) && (_3rdQ==DALI_LOGIC_1) && (_4thQ==DALI_LOGIC_1)) out
             -put = 1;
 626   1              else if ((_1stQ==DALI_LOGIC_1) && (_2ndQ==DALI_LOGIC_1) && (_3rdQ==DALI_LOGIC_0) && (_4thQ==DALI_LOGIC_0)
             -) output = 0;
 627   1      
 628   1              //It Resets the "Global" bits (File Scope only) that are used to store the data read from the GPIO
 629   1              _1stQ=0;
 630   1              _2ndQ=0;
 631   1              _3rdQ=0;
 632   1              _4thQ=0;
 633   1      
 634   1              return output;
 635   1      }
 636          
 637          
 638          
 639          bit GetDaliIntputPin()
 640          {
 641   1       return DALI_IN;
 642   1      }
 643          
 644          void EnableDaliRxTimerInt()
 645          {
 646   1              IE |= IE_ET1__ENABLED;
 647   1      }
 648          
 649          void DisableDaliRxTimerInt()
 650          {
 651   1              IE &= 0xf7;
 652   1      }
 653          
 654          
 655          void ReloadDaliRxTimer(uint8_t reloadH, uint8_t reloadL)
 656          {
 657   1              TH1 = reloadH;
 658   1              TL1 = reloadL;
 659   1      }
 660          
 661          void ReloadnStartDaliRxTimer(uint8_t reloadH, uint8_t reloadL)
 662          {
 663   1              TH1 = reloadH;
 664   1              TL1 = reloadL;
 665   1              EnableDaliRxTimerInt();
 666   1              StartDaliRxTimer();
 667   1      }
 668          
 669          void StopnDisableDaliRxTimer()
 670          {
 671   1      
C51 COMPILER V9.53.0.0   DALI                                                              05/03/2016 11:55:38 PAGE 12  

 672   1              StopDaliRxTimer();
 673   1              DisableDaliRxTimerInt();
 674   1      }
 675          
 676          
 677          void StartDaliRxTimer()
 678          {
 679   1      
 680   1              TCON |= TCON_TR1__RUN;          //Enables Timer 1 Run
 681   1      }
 682          
 683          
 684          uint16_t GetDaliRxTimer()
 685          {
 686   1              return TH1|TL1;
 687   1      }
 688          
 689          
 690          void StopDaliRxTimer()
 691          {
 692   1      
 693   1              TH1 = 0;
 694   1              TL1 = 0;
 695   1              TCON |= TCON_TR1__STOP;         //Enables Timer 1 Run
 696   1      }
 697          
 698          void IsDaliBusQuiet()
 699          {
 700   1      
 701   1              if (GetDaliIntputPin()==1)
 702   1              {
 703   2      
 704   2                      if(GetBusQuietCounter()<=254) IncBusQuietCounter();
 705   2              }
 706   1              if (GetDaliIntputPin()==0)
 707   1              {
 708   2      
 709   2                      ClearBusQuietCounter();
 710   2              }
 711   1      }
 712          
 713          
 714          void IncBusQuietCounter()
 715          {
 716   1              BusQuietCounter++;
 717   1      }
 718          
 719          void ClearBusQuietCounter()
 720          {
 721   1              BusQuietCounter=0;
 722   1      }
 723          
 724          uint8_t GetBusQuietCounter()
 725          {
 726   1              return BusQuietCounter;
 727   1      }
 728          
 729          
 730          void SetDaliRxErrorFlag()
 731          {
 732   1              DaliFlags.flag.Error = 1;
 733   1      }
 734          
C51 COMPILER V9.53.0.0   DALI                                                              05/03/2016 11:55:38 PAGE 13  

 735          void ClearDaliRxErrorFlag()
 736          {
 737   1              DaliFlags.flag.Error = 0;
 738   1      }
 739          
 740          bit GetDaliRxErrorFlag()
 741          {
 742   1              return DaliFlags.flag.Error;
 743   1      }
 744          
 745          
 746          void SetDaliInputPinPolarity (INTPOLARITY input)
 747          {
 748   1              if (input==ACTIVE_HIGH) IT01CF |= 0x80;
 749   1              else IT01CF &=0x7f;
 750   1      }
 751          
 752          
 753          void EnableInt1 ()
 754          {
 755   1              TCON &= 0xF7; //Clearing the interrupt
 756   1              IE |= 0x4;
 757   1      }
 758          
 759          void DisableInt1 ()
 760          {
 761   1              IE &= 0xfb;
 762   1      }
 763          
 764          
 765          void DaliRXDecoding(int EntryMethod)
 766          {
 767   1              static xdata DALI_FRAME State = IDLE;
 768   1              int Entry;
 769   1      
 770   1              static xdata BITS_BYTE DaliData;                //Variable used to temporarily store the bits being read from the Dali 
             -Command
 771   1              static xdata uint8_t bitscounter=7;             //Keeps the position of the current bit being read
 772   1              int bitread=0;                                                  //Used to store the current bit being read. if the value is -1, it means the data wa
             -s invalid
 773   1      
 774   1              Entry=EntryMethod;
 775   1      
 776   1              switch (State)
 777   1      
 778   1                              {
 779   2      
 780   2                                      case IDLE:                      //In this state, it checks if the RX bus was quite and also if it receives the start bit
 781   2                                                              {
 782   3                                                                      if (GetBusQuietCounter()>1) State = START;
 783   3                                                                      DaliData.Abyte=0;
 784   3                                                                      DaliFlags.DRegister=0;          //It resets all the Flags
 785   3                                                                      DaliFlags.flag.Busy=1;          //It sets the Flag indicating the Dali Rx is busy
 786   3      
 787   3                                                                      //This Jumps straight to the next State on the State Machine so we don't loose a cycle, it purp
             -osely doesn't have a break
 788   3                                                              }
 789   2      
 790   2                                      case START:                     //In this state, it checks if the RX bus was quite and also if it receives the start bit
 791   2                                                              {
 792   3                                                                      State = startconditionbitDemodulation();
 793   3                                                                      if (State==ERRORRESET) ErrorLog = START;
 794   3                                                                      break;
C51 COMPILER V9.53.0.0   DALI                                                              05/03/2016 11:55:38 PAGE 14  

 795   3                                                              }
 796   2      
 797   2                                      case ADDRESS:                   //In this state, it gets the Data coming from the Dali Packet and load it to the Ad
             -dress Register and to the Data Register
 798   2                                      case DATA:
 799   2                                                      {
 800   3      
 801   3                                                              if (bitDemodulation())  //Is Demodulation done for the bit?
 802   3                                                                      {
 803   4                                                                              bitread = isbitHighorLow();
 804   4      
 805   4                                                                              if (bitread!=-1)
 806   4                                                                              {
 807   5                                                                                      switch (bitscounter)
 808   5                                                                                      {
 809   6                                                                                              case 0: DaliData.nybble.BB0 = bitread;
 810   6                                                                                                              break;
 811   6      
 812   6                                                                                              case 1: DaliData.nybble.BB1 = bitread;
 813   6                                                                                                              break;
 814   6      
 815   6                                                                                              case 2: DaliData.nybble.BB2 = bitread;
 816   6                                                                                                              break;
 817   6      
 818   6                                                                                              case 3: DaliData.nybble.BB3 = bitread;
 819   6                                                                                                              break;
 820   6      
 821   6                                                                                              case 4: DaliData.nybble.BB4 = bitread;
 822   6                                                                                                              break;
 823   6      
 824   6                                                                                              case 5: DaliData.nybble.BB5 = bitread;
 825   6                                                                                                              break;
 826   6      
 827   6                                                                                              case 6: DaliData.nybble.BB6 = bitread;
 828   6                                                                                                              break;
 829   6      
 830   6                                                                                              case 7: DaliData.nybble.BB7 = bitread;
 831   6                                                                                                              break;
 832   6                                                                                      }
 833   5                                                                                      if(bitscounter--==0)
 834   5                                                                                      {
 835   6      
 836   6                                                                                              bitscounter=7;
 837   6                                                                                              if (State==ADDRESS)     //Reading Address
 838   6                                                                                              {
 839   7                                                                                                      DaliRXReg.Address= DaliData.Abyte;
 840   7                                                                                                      State=DATA;
 841   7                                                                                              }
 842   6                                                                                              else                            //Reading Data
 843   6                                                                                              {
 844   7                                                                                                      DaliRXReg.Data= DaliData.Abyte;
 845   7                                                                                                      State= STOP;
 846   7                                                                                                      ReloadnStartDaliRxTimer(TMH,TML); //Reloads the Timer for the STOP bit condition
 847   7      
 848   7                                                                                              }
 849   6      
 850   6                                                                                      }
 851   5      
 852   5                                                                              }
 853   4      
 854   4                                                                              else //If any of the bits is corrupted, the device goes to ERRORRESET MODE
 855   4                                                                              {
 856   5                                                                                      ErrorLog = State;
C51 COMPILER V9.53.0.0   DALI                                                              05/03/2016 11:55:38 PAGE 15  

 857   5                                                                                      State = ERRORRESET;
 858   5      
 859   5                                                                              }
 860   4                                                              }
 861   3                                                              break;
 862   3                                                      }
 863   2                                      case STOP:                      //In this state, it checks if the RX bus was quite and also if it receives the start bit
 864   2                                                              {
 865   3                                                                      State = stopconditionbitverify();
 866   3                                                                      if (State==ERRORRESET) ErrorLog = STOP;
 867   3      
 868   3                                                                      if (State==STOP)        break;
 869   3                                                              }
 870   2                                      case END:                       //In this state, it Resets the state machine and Turn on the Data Ready Flag
 871   2                                                              {
 872   3                                                                      State = IDLE;
 873   3                                                                      ToogleTestLed2();
 874   3                                                                      ErrorLog = IDLE;
 875   3                                                                      StopnDisableDaliRxTimer();
 876   3                                                                      //INTERRUPT_0_enter_DefaultMode_from_RESET();
 877   3                                                                      SetDaliInputPinPolarity(ACTIVE_LOW);
 878   3                                                                      EnableInt1();
 879   3                                                              //      TCON=0;
 880   3                                                                      DaliFlags.flag.Dataready = 1;
 881   3                                                                      break;
 882   3                                                              }
 883   2      
 884   2                                      case ERRORRESET:                        //In this state, it Resets the state machine and Turn on the Data Ready Flag
 885   2                                                              {
 886   3                                                                      State = IDLE;
 887   3                                                                      //ToogleTestLed5();
 888   3                                                                      StopnDisableDaliRxTimer();
 889   3                                                                      SetDaliInputPinPolarity(ACTIVE_LOW);
 890   3                                                                      EnableInt1();
 891   3                                                              //      TCON=0;
 892   3                                                                      DaliFlags.flag.Error = 1;
 893   3                                                                      break;
 894   3                                                              }
 895   2      
 896   2                                      default: State=IDLE;
 897   2      
 898   2      
 899   2      
 900   2                              }
 901   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1521    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     11    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      5       7
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      4    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

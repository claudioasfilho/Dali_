C51 COMPILER V9.53.0.0   DALI                                                              04/27/2016 10:54:34 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE DALI
OBJECT MODULE PLACED IN .\src\Dali.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v3\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\clfilho
                    -\Dropbox (Silicon Labs)\Code_Workspace_Dali\Dali_\src\Dali.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FL
                    -OATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:/SiliconLabs/SimplicityStudio/v3/dev
                    -eloper/sdks/si8051/v3//Device/shared/si8051Base;C:/SiliconLabs/SimplicityStudio/v3/developer/sdks/si8051/v3//Device/EFM8
                    -UB1;C:/SiliconLabs/SimplicityStudio/v3/developer/sdks/si8051/v3//Device/EFM8UB1/inc;C:\SiliconLabs\SimplicityStudio\v3_4
                    -a\developer\sdks\si8051\v3\Device\EFM8UB1\inc) PRINT(.\src\Dali.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\Dal
                    -i.OBJ)

line level    source

   1          //-----------------------------------------------------------------------------
   2          // Dali.c
   3          //-----------------------------------------------------------------------------
   4          // Copyright 2014 Silicon Laboratories, Inc.
   5          // http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   6          //
   7          // Program Description:
   8          //
   9          // This program uses Timer0 in 8-bit counter/timer with reload mode.
  10          // It uses the Timer0 to create an interrupt at a certain rate and toggles
  11          // the LED when the interrupt counter reaches the selected value. 
  12          //
  13          // Resources:
  14          //   SYSCLK - 24.5 MHz HFOSC0 / 8
  15          //   Timer0 - 10 Hz interrupt
  16          //   P1.4   - LED green
  17          //   P2.3   - Display enable
  18          //
  19          //-----------------------------------------------------------------------------
  20          // How To Test: EFM8UB1 STK
  21          //-----------------------------------------------------------------------------
  22          // 1) Place the switch in "AEM" mode.
  23          // 2) Connect the EFM8UB1 STK board to a PC using a mini USB cable.
  24          // 3) Compile and download code to the EFM8UB1 STK board.
  25          //    In Simplicity Studio IDE, select Run -> Debug from the menu bar,
  26          //    click the Debug button in the quick menu, or press F11.
  27          // 4) Run the code.
  28          //    In Simplicity Studio IDE, select Run -> Resume from the menu bar,
  29          //    click the Resume button in the quick menu, or press F8.
  30          // 5) Check that the green LED is blinking.
  31          //
  32          // Target:         EFM8UB1
  33          // Tool chain:     Generic
  34          //
  35          // Release 0.1 (ST)
  36          //    - Initial Revision
  37          //    - 10 OCT 2014
  38          //
  39          
  40          //-----------------------------------------------------------------------------
  41          // Includes
  42          //-----------------------------------------------------------------------------
  43          #include <SI_EFM8UB1_Register_Enums.h>
  44          #include "InitDevice.h"
  45          #include "Dali.h"
  46          
  47          
  48          
  49          
  50          //bit MDone;
C51 COMPILER V9.53.0.0   DALI                                                              04/27/2016 10:54:34 PAGE 2   

  51          //bit MOutput;
  52          //bit DaliStopFlag;
  53          //bit DaliErrorFlag;
  54          
  55          static xdata DALIFLAGS DaliFlags;
  56          static xdata DALIRXREGISTERS DaliRXReg;
  57          
  58          /*********************************************************************************
  59           *********************************************************************************
  60                                                   Manchester Encoder Related Functions
  61           *********************************************************************************
  62           *********************************************************************************/
  63          
  64          
  65          /*Manchester Decoder Busy Flag Getters and Setters*/
  66          
  67          void SetBusyFlag()
  68          {
  69   1              DaliFlags.flag.Busy = 1;
  70   1      }
  71          
  72          void ClearBusyFlag()
  73          {
  74   1              DaliFlags.flag.Busy = 0;
  75   1      }
  76          
  77          bit GetBusyFlag()
  78          {
  79   1       return DaliFlags.flag.Busy;
  80   1      }
  81          
  82          /*Manchester Decoder Output Flag Getters and Setters*/
  83          
  84          void SetMDOutput()
  85          {
  86   1              DaliFlags.flag.Output =1;
  87   1      }
  88          
  89          void ClearMDOutput()
  90          {
  91   1              DaliFlags.flag.Output =0;
  92   1      }
  93          
  94          bit GetMDOutput()
  95          {
  96   1       return DaliFlags.flag.Output;
  97   1      }
  98          
  99          
 100          void ManchesterEncoder (uint8_t input)
 101          {
 102   1              static BITS_BYTE Input;
 103   1      
 104   1              static int8_t counter = 8;                              //It uses 8 steps because it sends 7 bits and stills needs the time to conc
             -lude the last bit before it loads the counter again
 105   1      
 106   1              ClearBusyFlag();
 107   1      
 108   1              if (counter==8)
 109   1              {
 110   2                      Input.Abyte = input;
 111   2              }
 112   1      
C51 COMPILER V9.53.0.0   DALI                                                              04/27/2016 10:54:34 PAGE 3   

 113   1              while (counter>=0)
 114   1              {
 115   2                      while(GetBusyFlag()==1);
 116   2      
 117   2                      if (GetBusyFlag()==0)
 118   2                      {
 119   3                              switch (counter--){
 120   4      
 121   4                                                              case 0: //SetBusyFlag();
 122   4                                                              break;
 123   4                                                              case 1: DaliFlags.flag.Output = Input.nybble.BB0;
 124   4                                                              SetBusyFlag();
 125   4                                                              break;
 126   4                                                              case 2: DaliFlags.flag.Output = Input.nybble.BB1;
 127   4                                                              SetBusyFlag();
 128   4                                                              break;
 129   4                                                              case 3: DaliFlags.flag.Output = Input.nybble.BB2;
 130   4                                                              SetBusyFlag();
 131   4                                                              break;
 132   4                                                              case 4: DaliFlags.flag.Output = Input.nybble.BB3;
 133   4                                                              SetBusyFlag();
 134   4                                                              break;
 135   4                                                              case 5: DaliFlags.flag.Output = Input.nybble.BB4;
 136   4                                                              SetBusyFlag();
 137   4                                                              break;
 138   4                                                              case 6: DaliFlags.flag.Output = Input.nybble.BB5;
 139   4                                                              SetBusyFlag();
 140   4                                                              break;
 141   4                                                              case 7: DaliFlags.flag.Output = Input.nybble.BB6;
 142   4                                                              SetBusyFlag();
 143   4                                                              break;
 144   4                                                              case 8: DaliFlags.flag.Output = Input.nybble.BB7;
 145   4                                                              SetBusyFlag();
 146   4                                                              break;
 147   4                                      }
 148   3      
 149   3      
 150   3                      }
 151   2      
 152   2              }
 153   1      
 154   1              counter=8;
 155   1      
 156   1      }
 157          
 158          /*********************************************************************************
 159           *********************************************************************************
 160                                                   Dali TX Related Functions
 161           *********************************************************************************
 162           *********************************************************************************/
 163          
 164          void DaliTxHandler()
 165          {
 166   1              static uint8_t counter = 0;
 167   1              static uint8_t evcounter = 0;
 168   1      
 169   1              if (GetBusyFlag())
 170   1              {
 171   2                      if (evcounter++==15)
 172   2                              {evcounter=0;}
 173   2                      if (GetDaliStopFlag()==0)               //Are these the Stop Bits?
 174   2                      {
 175   3      
C51 COMPILER V9.53.0.0   DALI                                                              04/27/2016 10:54:34 PAGE 4   

 176   3                              //The next lines implement the two steps of the Manchester Decoding
 177   3                              if (counter==0)                                 //Process First Part of the Byte
 178   3                              {
 179   4                                      if (GetMDOutput()==0) SetDaliOutputPin();
 180   4                                      else ClearDaliOutputPin();
 181   4                                      counter++;
 182   4                              }
 183   3                              else
 184   3                              {                                                               //Process 2nd Part of the Byte
 185   4      
 186   4                                      if (GetMDOutput()==0) ClearDaliOutputPin();
 187   4                                      else SetDaliOutputPin();
 188   4                                      counter=0;
 189   4      
 190   4                                      ClearBusyFlag();                //Finished Processing Byte for Manchester Encoder
 191   4                              }
 192   3      
 193   3                      }
 194   2                      else                            //Yes, This is the Stop bits stage
 195   2                              {
 196   3                                      if (counter++<4)        SetDaliOutputPin();             //It keeps the Output High for 4 Cycles of the Timer
 197   3                                      else{
 198   4                                                      SetDaliOutputPin();             //The Line is normally High;
 199   4                                                      counter=0;
 200   4                                                      ClearDaliStopFlag();
 201   4                                                      ClearBusyFlag();                //Finished Processing Byte for Manchester Encoder
 202   4                                              }
 203   3                              }
 204   2                      }
 205   1      
 206   1      }
 207          
 208          
 209          void ReloadDaliTxTimer(uint8_t reloadH, uint8_t reloadL)
 210          {
 211   1              TH0 = reloadH;
 212   1              TL0 = reloadL;
 213   1      }
 214          
 215          
 216          void StartDaliTxTimer()
 217          {
 218   1      
 219   1              TCON |= TCON_TR0__RUN;          //Enables Timer 1 Run
 220   1      }
 221          
 222          
 223          uint16_t GetDaliTxTimer()
 224          {
 225   1              return TH0|TL0;
 226   1      }
 227          
 228          
 229          void StopDaliTxTimer()
 230          {
 231   1      
 232   1              TH1 = 0;
 233   1              TL1 = 0;
 234   1              TCON |= TCON_TR0__STOP;         //Enables Timer 1 Run
 235   1      }
 236          
 237          
 238          void DaliFrameStart()
C51 COMPILER V9.53.0.0   DALI                                                              04/27/2016 10:54:34 PAGE 5   

 239          {
 240   1              ClearBusyFlag();                                //Clear Flag that indicates the Manchester Decoder is Busy on the Interrupt
 241   1              SetMDOutput();
 242   1              SetBusyFlag();                                  //Sets the Busy Flag so the Bit can be processed
 243   1              while(GetBusyFlag()==1);                //Waits until the Bit gets transmitted
 244   1      
 245   1      }
 246          
 247          void DaliFrameStop()
 248          {
 249   1              ClearBusyFlag();                //Clear Flag that indicates the Manchester Decoder is Busy on the Interrupt
 250   1              SetDaliStopFlag();
 251   1              SetBusyFlag();                  //Sets the Busy Flag so the Bit can be processed
 252   1              while(GetBusyFlag()==1);                //Waits until the Bit gets transmitted
 253   1      
 254   1      }
 255          
 256          void DaliTXStateMachine(uint8_t address, uint8_t Ddata)
 257          {
 258   1              DALI_FRAME States;
 259   1      
 260   1              SetDaliOutputPin();                     //The Line is Normally High
 261   1              States = START;
 262   1      
 263   1              while (States<END)
 264   1              {
 265   2                      switch (States)
 266   2                      {
 267   3                              case START: {
 268   4                                                              DaliFrameStart();
 269   4                                                              States= ADDRESS;
 270   4                                                              break;
 271   4                                                      }
 272   3      
 273   3                              case ADDRESS: {
 274   4                                                              ManchesterEncoder(address);
 275   4                                                              States= DATA;
 276   4                                                              break;
 277   4                                                      }
 278   3      
 279   3                              case DATA: {
 280   4                                                              ManchesterEncoder(Ddata);
 281   4                                                              States= STOP;
 282   4                                                              break;
 283   4                                                      }
 284   3      
 285   3                              case STOP: {
 286   4                                                              DaliFrameStop();
 287   4                                                              States= END;
 288   4                                                              break;
 289   4                                                      }
 290   3      
 291   3                      }
 292   2              }
 293   1      
 294   1      }
 295          /*Dali Stop bit Flag Getters and Setters*/
 296          
 297          void SetDaliStopFlag()
 298          {
 299   1              DaliFlags.flag.Stop =1;
 300   1      }
 301          
C51 COMPILER V9.53.0.0   DALI                                                              04/27/2016 10:54:34 PAGE 6   

 302          void ClearDaliStopFlag()
 303          {
 304   1              DaliFlags.flag.Stop =0;
 305   1      }
 306          
 307          bit GetDaliStopFlag()
 308          {
 309   1       return DaliFlags.flag.Stop;
 310   1      }
 311          
 312          
 313          void SetDaliOutputPin()
 314          {
 315   1              DALI_OUT=1;
 316   1      }
 317          
 318          void ClearDaliOutputPin()
 319          {
 320   1              DALI_OUT=0;
 321   1      }
 322          
 323          bit GetDaliOutputPin()
 324          {
 325   1       return DALI_OUT;
 326   1      }
 327          
 328          
 329          /*********************************************************************************
 330           *********************************************************************************
 331                                                   Dali RX Related Functions
 332           *********************************************************************************
 333           *********************************************************************************/
 334          uint8_t BusQuietCounter;
 335          
 336          bit _1stQ;
 337          bit _2ndQ;
 338          bit _3rdQ;
 339          bit _4thQ;
 340          
 341          static xdata DALI_FRAME ErrorLog = IDLE;
 342          
 343          
 344          DALI_FRAME startconditionbitDemodulation()
 345          {
 346   1              static xdata DALI_DEMOD bitState = _1qB;
 347   1      
 348   1              static xdata uint8_t DebugCounter=0;
 349   1      
 350   1              if (DebugCounter==1)
 351   1              {
 352   2                      ToogleTestLed5();
 353   2                      _1stQ = GetDaliIntputPin();
 354   2              }
 355   1      
 356   1              switch (bitState)
 357   1              {
 358   2                      case _1qB: //This is Triggered by the INT1_ISR
 359   2                      {
 360   3                              _1stQ = GetDaliIntputPin();
 361   3                              if((GetDaliIntputPin()==DALI_LOGIC_0))
 362   3                              {
 363   4      
 364   4                                      ReloadnStartDaliRxTimer(STMH, STML);
C51 COMPILER V9.53.0.0   DALI                                                              04/27/2016 10:54:34 PAGE 7   

 365   4                                      bitState = _2qB;
 366   4                                      //ToogleTestLed();
 367   4                              }
 368   3                              else
 369   3                              {
 370   4                                      //Something is wrong with the Data, it Returns an Error
 371   4                                      bitState = _1qB;
 372   4                                      return ERRORRESET;
 373   4                              }
 374   3                              break;
 375   3                      }
 376   2      
 377   2                      case _2qB: //This is Triggered by the TIMER1_ISR
 378   2                      {
 379   3                              _2ndQ = GetDaliIntputPin();
 380   3                              if((GetDaliIntputPin()==DALI_LOGIC_0))
 381   3                              {
 382   4      
 383   4                                      StopnDisableDaliRxTimer();
 384   4                                      SetDaliInputPinPolarity(ACTIVE_HIGH);
 385   4                                      EnableInt1();
 386   4                                      bitState = _3qB;
 387   4                                      //ToogleTestLed();
 388   4                              }
 389   3                              else
 390   3                              {
 391   4                                      //Something is wrong with the Data, it Returns an Error
 392   4                                      bitState = _1qB;
 393   4                                      return ERRORRESET;
 394   4                              }
 395   3                              break;
 396   3                      }
 397   2      
 398   2                      case _3qB: //This is Triggered by the TIMER1_ISR
 399   2                      {
 400   3                              _3rdQ = GetDaliIntputPin();
 401   3                              if((GetDaliIntputPin()==DALI_LOGIC_1))
 402   3                              {
 403   4      
 404   4      
 405   4                                      ReloadnStartDaliRxTimer(STMH, STML);
 406   4                                      bitState = _4qB;
 407   4                                      //ToogleTestLed();
 408   4      
 409   4                              }
 410   3                              else
 411   3                              {
 412   4                                      //Something is wrong with the Data, it Returns an Error
 413   4                                      bitState = _1qB;
 414   4                                      return ERRORRESET;
 415   4                              }
 416   3                              break;
 417   3      
 418   3                      }
 419   2                      case _4qB: //This is Triggered by the TIMER1_ISR, once completed successfully it disables the INT1 and i
             -t uses the Timer to check the DALI_IN State
 420   2                      {
 421   3                              _4thQ = GetDaliIntputPin();
 422   3                              if((GetDaliIntputPin()==DALI_LOGIC_1))
 423   3                              {
 424   4      
 425   4                                      DebugCounter++;
 426   4      
C51 COMPILER V9.53.0.0   DALI                                                              04/27/2016 10:54:34 PAGE 8   

 427   4                                      DisableInt1();
 428   4                                      ReloadnStartDaliRxTimer(STMH, STML);
 429   4                                      bitState = _1qB;
 430   4                                      //ToogleTestLed();
 431   4                                      return ADDRESS; //Processing is done. It resets this state machine and moves the main state machine to
             - the next state
 432   4                              }
 433   3                              else
 434   3                              {
 435   4                                      //Something is wrong with the Data, it resets the INT trigger and Disables Timer
 436   4                                      bitState = _1qB;
 437   4                                      return ERRORRESET;
 438   4                              }
 439   3                              break;
 440   3                      }
 441   2      
 442   2              }
 443   1      
 444   1              return START; //Still Processing the Bit
 445   1      }
 446          
 447          DALI_FRAME stopconditionbitverify()
 448          {
 449   1              static xdata DALI_DEMOD bitState = _1qB;
 450   1      
 451   1      
 452   1              switch (bitState)
 453   1              {
 454   2                      case _1qB: //This is Triggered by the TIMER1_ISR
 455   2                      {
 456   3                              if((GetDaliIntputPin()==DALI_LOGIC_1))
 457   3                              {
 458   4      
 459   4                                      _1stQ = GetDaliIntputPin();
 460   4                                      ReloadDaliRxTimer(TMH, TML);
 461   4                                      bitState = _2qB;
 462   4                                      ToogleTestLed3();
 463   4                              }
 464   3                              else //If the bit is corrupted, the device goes to ERRORRESET MODE
 465   3                              {
 466   4                                      bitState = _1qB;
 467   4                                      return ERRORRESET;
 468   4                              }
 469   3                              break;
 470   3                      }
 471   2      
 472   2                      case _2qB: //This is Triggered by the TIMER1_ISR
 473   2                      {
 474   3                              if((GetDaliIntputPin()==DALI_LOGIC_1))
 475   3                              {
 476   4      
 477   4                                      _2ndQ = GetDaliIntputPin();
 478   4                                      ReloadDaliRxTimer(TMH, TML);
 479   4                                      bitState = _3qB;
 480   4                                      ToogleTestLed3();
 481   4                              }
 482   3                              else //If the bit is corrupted, the device goes to ERRORRESET MODE
 483   3                              {
 484   4                                      bitState = _1qB;
 485   4                                      return ERRORRESET;
 486   4                              }
 487   3                              break;
 488   3                      }
C51 COMPILER V9.53.0.0   DALI                                                              04/27/2016 10:54:34 PAGE 9   

 489   2      
 490   2                      case _3qB: //This is Triggered by the TIMER1_ISR
 491   2                      {
 492   3                              if((GetDaliIntputPin()==DALI_LOGIC_1))
 493   3                              {
 494   4      
 495   4                                      _3rdQ = GetDaliIntputPin();
 496   4                                      ReloadDaliRxTimer(TMH, TML);
 497   4                                      bitState = _4qB;
 498   4                                      ToogleTestLed3();
 499   4      
 500   4                              }
 501   3                              else //If the bit is corrupted, the device goes to ERRORRESET MODE
 502   3                              {
 503   4                                      bitState = _1qB;
 504   4                                      return ERRORRESET;
 505   4                              }
 506   3                              break;
 507   3      
 508   3                      }
 509   2                      case _4qB: //This is Triggered by the TIMER1_ISR, once completed successfully it disables the INT1 and i
             -t uses the Timer to check the DALI_IN State
 510   2                      {
 511   3                              if((GetDaliIntputPin()==DALI_LOGIC_1))
 512   3                              {
 513   4      
 514   4                                      _4thQ = GetDaliIntputPin();
 515   4                                      bitState = _1qB;
 516   4                                      ToogleTestLed3();
 517   4                                      return END; //Processing is done. It resets this state machine and moves the main state machine to the
             - next state
 518   4                              }
 519   3                              else //If the bit is corrupted, the device goes to ERRORRESET MODE
 520   3                                      {
 521   4                                              bitState = _1qB;
 522   4                                              return ERRORRESET;
 523   4                                      }
 524   3                              break;
 525   3                      }
 526   2      
 527   2              }
 528   1      
 529   1              return STOP; //Still Processing the Bit
 530   1      }
 531          
 532          
 533          bit bitDemodulation()
 534          {
 535   1              static xdata DALI_DEMOD bitState = _1qB;
 536   1      
 537   1              switch (bitState)
 538   1                      {
 539   2                              case _1qB: //This is Triggered by the TIMER1_ISR
 540   2                              {
 541   3      
 542   3                                      _1stQ = GetDaliIntputPin();
 543   3                                      ReloadnStartDaliRxTimer(STMH, STML);
 544   3                                      bitState = _2qB;
 545   3                                      //ToogleTestLed1();
 546   3                                      break;
 547   3                              }
 548   2      
 549   2                              case _2qB: //This is Triggered by the TIMER1_ISR
C51 COMPILER V9.53.0.0   DALI                                                              04/27/2016 10:54:34 PAGE 10  

 550   2                              {
 551   3                                      _2ndQ = GetDaliIntputPin();
 552   3                                      ReloadnStartDaliRxTimer(STMH, STML);
 553   3                                      bitState = _3qB;
 554   3                                      //ToogleTestLed2();
 555   3                                      break;
 556   3                              }
 557   2      
 558   2                              case _3qB: //This is Triggered by the TIMER1_ISR
 559   2                              {
 560   3      
 561   3                                      _3rdQ = GetDaliIntputPin();
 562   3                                      ReloadnStartDaliRxTimer(STMH, STML);
 563   3                                      bitState = _4qB;
 564   3                                      //ToogleTestLed3();
 565   3                                      break;
 566   3      
 567   3                              }
 568   2                              case _4qB: //This is Triggered by the TIMER1_ISR
 569   2                              {
 570   3      
 571   3                                      _4thQ = GetDaliIntputPin();
 572   3                                      ReloadnStartDaliRxTimer(STMH, STML);
 573   3                                      bitState = _1qB;
 574   3                                      //ToogleTestLed4();
 575   3                                      return 1; //Processing is done. It resets this state machine and informs user the bit information is a
             -vailable
 576   3                                      break;
 577   3                              }
 578   2                      }
 579   1              return 0;       //Still Processing the Bit
 580   1      
 581   1      }
 582          
 583          //This Function returns the Logic level of the Bit read by the bitDemodulation() function and it clears th
             -e "Quarter" bits. If the bit is invalid, it returns -1
 584          int isbitHighorLow()
 585          {
 586   1              int output=-1;
 587   1      
 588   1              if ((_1stQ==DALI_LOGIC_0) && (_2ndQ==DALI_LOGIC_0) && (_3rdQ==DALI_LOGIC_1) && (_4thQ==DALI_LOGIC_1)) out
             -put = 1;
 589   1              else if ((_1stQ==DALI_LOGIC_1) && (_2ndQ==DALI_LOGIC_1) && (_3rdQ==DALI_LOGIC_0) && (_4thQ==DALI_LOGIC_0)
             -) output = 0;
 590   1      
 591   1              //It Resets the "Global" bits (File Scope only) that are used to store the data read from the GPIO
 592   1              _1stQ=0;
 593   1              _2ndQ=0;
 594   1              _3rdQ=0;
 595   1              _4thQ=0;
 596   1      
 597   1              return output;
 598   1      }
 599          
 600          
 601          
 602          bit GetDaliIntputPin()
 603          {
 604   1       return DALI_IN;
 605   1      }
 606          
 607          void EnableDaliRxTimerInt()
 608          {
C51 COMPILER V9.53.0.0   DALI                                                              04/27/2016 10:54:34 PAGE 11  

 609   1              IE |= IE_ET1__ENABLED;
 610   1      }
 611          
 612          void DisableDaliRxTimerInt()
 613          {
 614   1              IE &= 0xf7;
 615   1      }
 616          
 617          
 618          void ReloadDaliRxTimer(uint8_t reloadH, uint8_t reloadL)
 619          {
 620   1              TH1 = reloadH;
 621   1              TL1 = reloadL;
 622   1      }
 623          
 624          void ReloadnStartDaliRxTimer(uint8_t reloadH, uint8_t reloadL)
 625          {
 626   1              TH1 = reloadH;
 627   1              TL1 = reloadL;
 628   1              EnableDaliRxTimerInt();
 629   1              StartDaliRxTimer();
 630   1      }
 631          
 632          void StopnDisableDaliRxTimer()
 633          {
 634   1      
 635   1              StopDaliRxTimer();
 636   1              DisableDaliRxTimerInt();
 637   1      }
 638          
 639          
 640          void StartDaliRxTimer()
 641          {
 642   1      
 643   1              TCON |= TCON_TR1__RUN;          //Enables Timer 1 Run
 644   1      }
 645          
 646          
 647          uint16_t GetDaliRxTimer()
 648          {
 649   1              return TH1|TL1;
 650   1      }
 651          
 652          
 653          void StopDaliRxTimer()
 654          {
 655   1      
 656   1              TH1 = 0;
 657   1              TL1 = 0;
 658   1              TCON |= TCON_TR1__STOP;         //Enables Timer 1 Run
 659   1      }
 660          
 661          void IsDaliBusQuiet()
 662          {
 663   1      
 664   1              if (GetDaliIntputPin()==1)
 665   1              {
 666   2      
 667   2                      if(GetBusQuietCounter()<=254) IncBusQuietCounter();
 668   2              }
 669   1              if (GetDaliIntputPin()==0)
 670   1              {
 671   2      
C51 COMPILER V9.53.0.0   DALI                                                              04/27/2016 10:54:34 PAGE 12  

 672   2                      ClearBusQuietCounter();
 673   2              }
 674   1      }
 675          
 676          
 677          void IncBusQuietCounter()
 678          {
 679   1              BusQuietCounter++;
 680   1      }
 681          
 682          void ClearBusQuietCounter()
 683          {
 684   1              BusQuietCounter=0;
 685   1      }
 686          
 687          uint8_t GetBusQuietCounter()
 688          {
 689   1              return BusQuietCounter;
 690   1      }
 691          
 692          
 693          void SetDaliRxErrorFlag()
 694          {
 695   1              DaliFlags.flag.Error = 1;
 696   1      }
 697          
 698          void ClearDaliRxErrorFlag()
 699          {
 700   1              DaliFlags.flag.Error = 0;
 701   1      }
 702          
 703          bit GetDaliRxErrorFlag()
 704          {
 705   1              return DaliFlags.flag.Error;
 706   1      }
 707          
 708          
 709          void SetDaliInputPinPolarity (INTPOLARITY input)
 710          {
 711   1              if (input==ACTIVE_HIGH) IT01CF |= 0x80;
 712   1              else IT01CF &=0x7f;
 713   1      }
 714          
 715          
 716          void EnableInt1 ()
 717          {
 718   1              TCON &= 0xF7; //Clearing the interrupt
 719   1              IE |= 0x4;
 720   1      }
 721          
 722          void DisableInt1 ()
 723          {
 724   1              IE &= 0xfb;
 725   1      }
 726          
 727          
 728          void DaliRXDecoding(int EntryMethod)
 729          {
 730   1              static xdata DALI_FRAME State = IDLE;
 731   1              int Entry;
 732   1      
 733   1              static xdata BITS_BYTE DaliData;                //Variable used to temporarily store the bits being read from the Dali 
             -Command
C51 COMPILER V9.53.0.0   DALI                                                              04/27/2016 10:54:34 PAGE 13  

 734   1              static xdata uint8_t bitscounter=7;             //Keeps the position of the current bit being read
 735   1              int bitread=0;                                                  //Used to store the current bit being read. if the value is -1, it means the data wa
             -s invalid
 736   1      
 737   1              Entry=EntryMethod;
 738   1      
 739   1              switch (State)
 740   1      
 741   1                              {
 742   2      
 743   2                                      case IDLE:                      //In this state, it checks if the RX bus was quite and also if it receives the start bit
 744   2                                                              {
 745   3                                                                      if (GetBusQuietCounter()>1) State = START;
 746   3                                                                      DaliData.Abyte=0;
 747   3                                                                      DaliFlags.DRegister=0;          //It resets all the Flags
 748   3                                                                      DaliFlags.flag.Busy=1;          //It sets the Flag indicating the Dali Rx is busy
 749   3      
 750   3                                                                      //This Jumps straight to the next State on the State Machine so we don't loose a cycle, it purp
             -osely doesn't have a break
 751   3                                                              }
 752   2      
 753   2                                      case START:                     //In this state, it checks if the RX bus was quite and also if it receives the start bit
 754   2                                                              {
 755   3                                                                      State = startconditionbitDemodulation();
 756   3                                                                      if (State==ERRORRESET) ErrorLog = START;
 757   3                                                                      break;
 758   3                                                              }
 759   2      
 760   2                                      case ADDRESS:                   //In this state, it gets the Data coming from the Dali Packet and load it to the Ad
             -dress Register and to the Data Register
 761   2                                      case DATA:
 762   2                                                      {
 763   3      
 764   3                                                              if (bitDemodulation())  //Is Demodulation done for the bit?
 765   3                                                                      {
 766   4                                                                              bitread = isbitHighorLow();
 767   4      
 768   4                                                                              if (bitread!=-1)
 769   4                                                                              {
 770   5                                                                                      switch (bitscounter)
 771   5                                                                                      {
 772   6                                                                                              case 0: DaliData.nybble.BB0 = bitread;
 773   6                                                                                                              break;
 774   6      
 775   6                                                                                              case 1: DaliData.nybble.BB1 = bitread;
 776   6                                                                                                              break;
 777   6      
 778   6                                                                                              case 2: DaliData.nybble.BB2 = bitread;
 779   6                                                                                                              break;
 780   6      
 781   6                                                                                              case 3: DaliData.nybble.BB3 = bitread;
 782   6                                                                                                              break;
 783   6      
 784   6                                                                                              case 4: DaliData.nybble.BB4 = bitread;
 785   6                                                                                                              break;
 786   6      
 787   6                                                                                              case 5: DaliData.nybble.BB5 = bitread;
 788   6                                                                                                              break;
 789   6      
 790   6                                                                                              case 6: DaliData.nybble.BB6 = bitread;
 791   6                                                                                                              break;
 792   6      
 793   6                                                                                              case 7: DaliData.nybble.BB7 = bitread;
C51 COMPILER V9.53.0.0   DALI                                                              04/27/2016 10:54:34 PAGE 14  

 794   6                                                                                                              break;
 795   6                                                                                      }
 796   5                                                                                      if(bitscounter--==0)
 797   5                                                                                      {
 798   6      
 799   6                                                                                              bitscounter=7;
 800   6                                                                                              if (State==ADDRESS)     //Reading Address
 801   6                                                                                              {
 802   7                                                                                                      DaliRXReg.Address= DaliData.Abyte;
 803   7                                                                                                      State=DATA;
 804   7                                                                                              }
 805   6                                                                                              else                            //Reading Data
 806   6                                                                                              {
 807   7                                                                                                      DaliRXReg.Data= DaliData.Abyte;
 808   7                                                                                                      State= STOP;
 809   7                                                                                                      ReloadnStartDaliRxTimer(TMH,TML); //Reloads the Timer for the STOP bit condition
 810   7      
 811   7                                                                                              }
 812   6      
 813   6                                                                                      }
 814   5      
 815   5                                                                              }
 816   4      
 817   4                                                                              else //If any of the bits is corrupted, the device goes to ERRORRESET MODE
 818   4                                                                              {
 819   5                                                                                      ErrorLog = State;
 820   5                                                                                      State = ERRORRESET;
 821   5      
 822   5                                                                              }
 823   4                                                              }
 824   3                                                              break;
 825   3                                                      }
 826   2                                      case STOP:                      //In this state, it checks if the RX bus was quite and also if it receives the start bit
 827   2                                                              {
 828   3                                                                      State = stopconditionbitverify();
 829   3                                                                      if (State==ERRORRESET) ErrorLog = STOP;
 830   3      
 831   3                                                                      if (State==STOP)        break;
 832   3                                                              }
 833   2                                      case END:                       //In this state, it Resets the state machine and Turn on the Data Ready Flag
 834   2                                                              {
 835   3                                                                      State = IDLE;
 836   3                                                                      ToogleTestLed2();
 837   3                                                                      ErrorLog = IDLE;
 838   3                                                                      StopnDisableDaliRxTimer();
 839   3                                                                      //INTERRUPT_0_enter_DefaultMode_from_RESET();
 840   3                                                                      SetDaliInputPinPolarity(ACTIVE_LOW);
 841   3                                                                      EnableInt1();
 842   3                                                              //      TCON=0;
 843   3                                                                      DaliFlags.flag.Dataready = 1;
 844   3                                                                      break;
 845   3                                                              }
 846   2      
 847   2                                      case ERRORRESET:                        //In this state, it Resets the state machine and Turn on the Data Ready Flag
 848   2                                                              {
 849   3                                                                      State = IDLE;
 850   3                                                                      //ToogleTestLed5();
 851   3                                                                      StopnDisableDaliRxTimer();
 852   3                                                                      SetDaliInputPinPolarity(ACTIVE_LOW);
 853   3                                                                      EnableInt1();
 854   3                                                              //      TCON=0;
 855   3                                                                      DaliFlags.flag.Error = 1;
 856   3                                                                      break;
C51 COMPILER V9.53.0.0   DALI                                                              04/27/2016 10:54:34 PAGE 15  

 857   3                                                              }
 858   2      
 859   2                                      default: State=IDLE;
 860   2      
 861   2      
 862   2      
 863   2                              }
 864   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1472    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     11    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      5       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      4    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

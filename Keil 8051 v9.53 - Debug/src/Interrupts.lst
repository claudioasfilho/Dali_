C51 COMPILER V9.53.0.0   INTERRUPTS                                                        04/18/2016 15:30:25 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE INTERRUPTS
OBJECT MODULE PLACED IN .\src\Interrupts.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v3\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\clfilho
                    -\Dropbox (Silicon Labs)\Code_Workspace_Dali\Dali_\src\Interrupts.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL
                    -(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:/SiliconLabs/SimplicityStudio/
                    -v3/developer/sdks/si8051/v3//Device/shared/si8051Base;C:/SiliconLabs/SimplicityStudio/v3/developer/sdks/si8051/v3//Devic
                    -e/EFM8UB1;C:/SiliconLabs/SimplicityStudio/v3/developer/sdks/si8051/v3//Device/EFM8UB1/inc) PRINT(.\src\Interrupts.lst) C
                    -OND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\Interrupts.OBJ)

line level    source

   1          //=========================================================
   2          // src/Interrupts.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!
   7          //=========================================================
   8          
   9                   
  10          // USER INCLUDES                        
  11          #include <SI_EFM8UB1_Register_Enums.h>
  12          #include "InitDevice.h"
  13          #include "Dali.h"
  14          
  15          //extern bit MDone;
  16          //extern bit MOutput;
  17          
  18          //-----------------------------------------------------------------------------
  19          // Global Constants
  20          //-----------------------------------------------------------------------------
  21          // Configurator set for HFOSC0/8
  22          #define SYSCLK             3062000
  23          
  24          static xdata DALI_TXFRAME State = START;
  25          //static xdata uint8_t bitCounter = 0;
  26          //static xdata uint8_t daliRXOutput=0;
  27          bit _1stHalf;
  28          bit _2ndHalf;
  29          
  30          SI_SBIT (LED2,SFR_P1, 4);                          //PB0 Switch Definition
  31          
  32          
  33          
  34          //-----------------------------------------------------------------------------
  35          // INT1_ISR
  36          //-----------------------------------------------------------------------------
  37          //
  38          // TIMER0 ISR Content goes here. Remember to clear flag bits:
  39          // TCON::TF0 (Timer 0 Overflow Flag)
  40          //
  41          // Here we process the Timer0 interrupt and toggle the LED when appropriate
  42          //
  43          //-----------------------------------------------------------------------------
  44          SI_INTERRUPT (INT1_ISR, INT1_IRQn)
  45          {
  46   1         static xdata uint8_t intcounter = 0;
  47   1         static xdata uint8_t debugcounter = 0;
  48   1      
  49   1      
  50   1         //if((GetDaliIntputPin()==0) &&(intcounter==0))
  51   1              if((GetBusQuietCounter()>1)&&(GetDaliIntputPin()==0) &&(intcounter==0))
C51 COMPILER V9.53.0.0   INTERRUPTS                                                        04/18/2016 15:30:25 PAGE 2   

  52   1              {
  53   2      
  54   2                      _1stHalf=GetDaliIntputPin();
  55   2                      SetDaliInputPinPolarity(ACTIVE_HIGH);
  56   2      
  57   2                      if(debugcounter++==9)
  58   2                      {
  59   3                              NOP();//LED2^=1;
  60   3                      }
  61   2      
  62   2      
  63   2              }
  64   1      
  65   1              if ((intcounter++==1))
  66   1              {
  67   2                      _2ndHalf=GetDaliIntputPin();
  68   2                      SetDaliInputPinPolarity(ACTIVE_LOW);
  69   2      
  70   2                      if ((_1stHalf==0) && (_2ndHalf==1))// && (GetDaliRxErrorFlag()==0))                     // Start bit received
  71   2                              {
  72   3                                      DisableInt1 ();
  73   3                                      StopDaliRxTimer();
  74   3      
  75   3                                      //It will reload a one period worth of time, so it will start sampling on the next bit
  76   3                                      ReloadDaliRxTimer(TMH, TML);
  77   3                                      EnableDaliRxTimerInt();
  78   3                                      StartDaliRxTimer();
  79   3                                      State = DATA;
  80   3      
  81   3                              }
  82   2                      intcounter=0;
  83   2                      _1stHalf = _2ndHalf =0;
  84   2              }
  85   1      
  86   1      
  87   1      }
  88          
  89          
  90          //-----------------------------------------------------------------------------
  91          // TIMER1_ISR
  92          //-----------------------------------------------------------------------------
  93          //
  94          // TIMER1 ISR Content goes here. Remember to clear flag bits:
  95          // TCON::TF1 (Timer 0 Overflow Flag)
  96          //
  97          // Here we process the Timer dedicated to Dali RX
  98          //
  99          //-----------------------------------------------------------------------------
 100          SI_INTERRUPT (TIMER1_ISR, TIMER1_IRQn)
 101          {
 102   1      
 103   1      
 104   1      static xdata uint8_t sampleCounter = 0;
 105   1      static xdata uint8_t bitsCounter = 7;
 106   1      xdata uint8_t buffer[8];
 107   1      xdata uint8_t BitBuffer[72];
 108   1      bit input;
 109   1      bit outputbit;
 110   1      xdata BITS_BYTE sample;
 111   1      xdata BITS_BYTE DataOutput;
 112   1      
 113   1      static xdata uint8_t Bunter=0;
 114   1      
C51 COMPILER V9.53.0.0   INTERRUPTS                                                        04/18/2016 15:30:25 PAGE 3   

 115   1              ReloadDaliRxTimer(STMH, STML);
 116   1              //input = GetDaliIntputPin();
 117   1      
 118   1      
 119   1              //This state machine makes sure the Rx handler is in the right State
 120   1              switch (State)
 121   1      
 122   1                      {
 123   2      
 124   2                              case START:                     //In this state, it checks if the RX bus was quite and also if it receives the start bit
 125   2                                              {
 126   3                                                      break;
 127   3                                              }
 128   2      
 129   2                              case DATA:
 130   2                                              {
 131   3      /*                                              //This state machine counts samples and store them to the sample struct
 132   3                                                      switch (sampleCounter++)
 133   3                                                      {
 134   3                                                      //Reading the First Half of the bit, 1st interaction
 135   3                                                              case 0:
 136   3                                                                              {
 137   3                                                                                      sample.nybble.BB0 = input;
 138   3                                                                                      break;
 139   3                                                                              }
 140   3                                                      //Reading the First Half of the bit, 2nd interaction
 141   3                                                              case 1:
 142   3                                                                              {
 143   3                                                                                      sample.nybble.BB1 = input;
 144   3                                                                                      break;
 145   3                                                                              }
 146   3                                                      //Reading the Second Half of the bit, 1st interaction
 147   3                                                              case 2:
 148   3                                                                              {
 149   3                                                                                      sample.nybble.BB4 = input;
 150   3                                                                                      break;
 151   3                                                                              }
 152   3                                                      //Reading the Second Half of the bit, 2nd interaction
 153   3                                                              case 3:
 154   3                                                                              {
 155   3                                                                                      sample.nybble.BB5 = input;
 156   3      
 157   3                                                                                      // Logic 1 received
 158   3                                                                                      if (sample.Abyte==0x30) outputbit =1;
 159   3                                                                                      // Logic 0 received
 160   3                                                                                      else if (sample.Abyte==0x03) outputbit =0;
 161   3      
 162   3                                                                                      //This state machine places the bit in the right bit location on the DataOutput Structure
 163   3                                                                                      switch (bitsCounter--)
 164   3                                                                                      {
 165   3                                                                                              case 0:
 166   3                                                                                                              {
 167   3                                                                                                                      DataOutput.nybble.BB0 = outputbit;
 168   3                                                                                                                      bitsCounter=8;
 169   3                                                                                                                      break;
 170   3                                                                                                              }
 171   3                                                                                              case 1:
 172   3                                                                                                              {
 173   3                                                                                                                      DataOutput.nybble.BB1 = outputbit;
 174   3                                                                                                                      break;
 175   3                                                                                                              }
 176   3                                                                                              case 2:
 177   3                                                                                                              {
C51 COMPILER V9.53.0.0   INTERRUPTS                                                        04/18/2016 15:30:25 PAGE 4   

 178   3                                                                                                                      DataOutput.nybble.BB2 = outputbit;
 179   3                                                                                                                      break;
 180   3                                                                                                              }
 181   3                                                                                              case 3:
 182   3                                                                                                              {
 183   3                                                                                                                      DataOutput.nybble.BB3 = outputbit;
 184   3                                                                                                                      break;
 185   3                                                                                                              }
 186   3                                                                                              case 4:
 187   3                                                                                                              {
 188   3                                                                                                                      DataOutput.nybble.BB4 = outputbit;
 189   3                                                                                                                      break;
 190   3                                                                                                              }
 191   3                                                                                              case 5:
 192   3                                                                                                              {
 193   3                                                                                                                      DataOutput.nybble.BB5 = outputbit;
 194   3                                                                                                                      break;
 195   3                                                                                                              }
 196   3                                                                                              case 6:
 197   3                                                                                                              {
 198   3                                                                                                                      DataOutput.nybble.BB6 = outputbit;
 199   3                                                                                                                      break;
 200   3                                                                                                              }
 201   3                                                                                              case 7:
 202   3                                                                                                              {
 203   3                                                                                                                      DataOutput.nybble.BB7 = outputbit;
 204   3                                                                                                                      break;
 205   3                                                                                                              }
 206   3                                                                                      }
 207   3      
 208   3      
 209   3      
 210   3                                                                                      break;
 211   3                                                                              }
 212   3      
 213   3                                                      }//End of switch (sampleCounter++)
 214   3      
 215   3      */                                              LED2^=1;
 216   3                                                      BitBuffer[Bunter++] = GetDaliIntputPin();
 217   3                                                      if (Bunter==72)
 218   3                                                      {
 219   4                                                              Bunter=0;
 220   4                                                              DisableDaliRxTimerInt();
 221   4                                                              SetDaliInputPinPolarity(ACTIVE_LOW);
 222   4                                                              EnableInt1();
 223   4                                                              State = START;
 224   4                                                      }
 225   3      
 226   3                                                      break;
 227   3                                              }//End of case DATA:
 228   2      
 229   2                      }//End of Switch State:
 230   1      
 231   1      
 232   1      }
*** WARNING C280 IN LINE 104 OF C:\Users\clfilho\Dropbox (Silicon Labs)\Code_Workspace_Dali\Dali_\src\Interrupts.c: 'sam
             -pleCounter': unreferenced local variable
*** WARNING C280 IN LINE 105 OF C:\Users\clfilho\Dropbox (Silicon Labs)\Code_Workspace_Dali\Dali_\src\Interrupts.c: 'bit
             -sCounter': unreferenced local variable
*** WARNING C280 IN LINE 106 OF C:\Users\clfilho\Dropbox (Silicon Labs)\Code_Workspace_Dali\Dali_\src\Interrupts.c: 'buf
             -fer': unreferenced local variable
*** WARNING C280 IN LINE 108 OF C:\Users\clfilho\Dropbox (Silicon Labs)\Code_Workspace_Dali\Dali_\src\Interrupts.c: 'inp
             -ut': unreferenced local variable
C51 COMPILER V9.53.0.0   INTERRUPTS                                                        04/18/2016 15:30:25 PAGE 5   

*** WARNING C280 IN LINE 109 OF C:\Users\clfilho\Dropbox (Silicon Labs)\Code_Workspace_Dali\Dali_\src\Interrupts.c: 'out
             -putbit': unreferenced local variable
*** WARNING C280 IN LINE 110 OF C:\Users\clfilho\Dropbox (Silicon Labs)\Code_Workspace_Dali\Dali_\src\Interrupts.c: 'sam
             -ple': unreferenced local variable
*** WARNING C280 IN LINE 111 OF C:\Users\clfilho\Dropbox (Silicon Labs)\Code_Workspace_Dali\Dali_\src\Interrupts.c: 'Dat
             -aOutput': unreferenced local variable
 233          
 234          
 235          //-----------------------------------------------------------------------------
 236          // Dali TX Timer ISR (TIMER0)
 237          //-----------------------------------------------------------------------------
 238          //
 239          // TIMER0 ISR Content goes here. Remember to clear flag bits:
 240          // TCON::TF0 (Timer 0 Overflow Flag)
 241          //
 242          // Here we process the Timer0 interrupt and toggle the LED when appropriate
 243          //
 244          //-----------------------------------------------------------------------------
 245          SI_INTERRUPT (TIMER0_ISR, TIMER0_IRQn)
 246          {
 247   1      
 248   1              ReloadDaliTxTimer(TMH, TML);
 249   1              DaliTxHandler();
 250   1              QueryDaliBus();
 251   1      
 252   1      }
 253          
 254          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    364    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      6      82
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2       2
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  7 WARNING(S),  0 ERROR(S)
